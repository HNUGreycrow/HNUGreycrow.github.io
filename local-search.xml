<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Vue3 笔记：深入响应式系统</title>
    <link href="/2025/08/18/Vue3-%E6%B7%B1%E5%85%A5%E5%93%8D%E5%BA%94%E5%BC%8F%E7%B3%BB%E7%BB%9F/"/>
    <url>/2025/08/18/Vue3-%E6%B7%B1%E5%85%A5%E5%93%8D%E5%BA%94%E5%BC%8F%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<h2 id="什么是响应性"><a href="#什么是响应性" class="headerlink" title="什么是响应性"></a>什么是响应性</h2><p>响应性是一种声明式处理变化的编程范式：当依赖数据变化时，依赖其计算的结果会自动更新。例如 Excel 中单元格通过公式关联，修改源单元格时目标单元格自动更新；而 JavaScript 默认不具备此特性，需通过特定机制实现。</p><p>官方文档：<a href="https://cn.vuejs.org/guide/extras/reactivity-in-depth.html#runtime-vs-compile-time-reactivity">深入响应式系统 | Vue.js (vuejs.org)</a></p><h2 id="Vue-中响应性的实现原理"><a href="#Vue-中响应性的实现原理" class="headerlink" title="Vue 中响应性的实现原理"></a>Vue 中响应性的实现原理</h2><p>Vue 通过拦截对象属性的读写操作，追踪依赖并在数据变化时触发更新，核心依赖<strong>Proxy</strong>（用于<code>reactive</code>）和<strong>getter&#x2F;setter</strong>（用于<code>ref</code>）实现。</p><h3 id="1-响应式对象的创建"><a href="#1-响应式对象的创建" class="headerlink" title="1. 响应式对象的创建"></a>1. 响应式对象的创建</h3><ul><li><p><strong><code>reactive()</code>实现</strong>：通过 Proxy 创建对象代理，拦截属性的<code>get</code>（读取）和<code>set</code>（修改）操作：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">reactive</span>(<span class="hljs-params">obj</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(obj, &#123;<br>    <span class="hljs-title function_">get</span>(<span class="hljs-params">target, key</span>) &#123;<br>      <span class="hljs-title function_">track</span>(target, key); <span class="hljs-comment">// 追踪依赖</span><br>      <span class="hljs-keyword">return</span> target[key];<br>    &#125;,<br>    <span class="hljs-title function_">set</span>(<span class="hljs-params">target, key, value</span>) &#123;<br>      target[key] = value;<br>      <span class="hljs-title function_">trigger</span>(target, key); <span class="hljs-comment">// 触发更新</span><br>    &#125;<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong><code>ref()</code>实现</strong>：通过对象的<code>getter/setter</code>拦截<code>value</code>属性的读写（用于原始值或非对象值）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">ref</span>(<span class="hljs-params">value</span>) &#123;<br>  <span class="hljs-keyword">const</span> refObject = &#123;<br>    <span class="hljs-keyword">get</span> <span class="hljs-title function_">value</span>() &#123;<br>      <span class="hljs-title function_">track</span>(refObject, <span class="hljs-string">&#x27;value&#x27;</span>); <span class="hljs-comment">// 追踪依赖</span><br>      <span class="hljs-keyword">return</span> value;<br>    &#125;,<br>    <span class="hljs-keyword">set</span> <span class="hljs-title function_">value</span>(<span class="hljs-params">newValue</span>) &#123;<br>      value = newValue;<br>      <span class="hljs-title function_">trigger</span>(refObject, <span class="hljs-string">&#x27;value&#x27;</span>); <span class="hljs-comment">// 触发更新</span><br>    &#125;<br>  &#125;;<br>  <span class="hljs-keyword">return</span> refObject;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="2-依赖追踪（track-target-key-）与更新触发（trigger-target-key-）的详细机制"><a href="#2-依赖追踪（track-target-key-）与更新触发（trigger-target-key-）的详细机制" class="headerlink" title="2. 依赖追踪（track(target, key)）与更新触发（trigger(target, key)）的详细机制"></a>2. 依赖追踪（<code>track(target, key)</code>）与更新触发（<code>trigger(target, key)</code>）的详细机制</h3><p>在 Vue 的响应式系统中，<code>track()</code> 和 <code>trigger()</code> 是实现 “数据变化自动触发更新” 的核心函数。前者负责记录 “谁依赖了数据”，后者负责在数据变化时 “通知依赖者更新”，二者配合完成从数据追踪到副作用执行的闭环。</p><h4 id="（1）依赖追踪：track-target-key-的作用与实现细节"><a href="#（1）依赖追踪：track-target-key-的作用与实现细节" class="headerlink" title="（1）依赖追踪：track(target, key) 的作用与实现细节"></a>（1）依赖追踪：<code>track(target, key)</code> 的作用与实现细节</h4><p><code>track()</code> 的核心任务是：<strong>当响应式数据的属性被读取时，记录当前正在运行的 “副作用”（effect），并将其与该属性关联起来</strong>，以便后续数据变化时能精准触发这个副作用。</p><ul><li><p><strong>触发时机</strong>：<code>track()</code> 会在响应式对象的属性被访问（即触发 <code>get</code> 拦截器）时调用。例如：</p><ul><li>访问 <code>reactive</code> 对象的属性（如 <code>obj.foo</code>）时，Proxy 的 <code>get</code> 方法会调用 <code>track(obj, &#39;foo&#39;)</code>。</li><li>访问 <code>ref</code> 的 <code>value</code> 属性（如 <code>count.value</code>）时，<code>get value()</code> 会调用 <code>track(refObject, &#39;value&#39;)</code>。</li></ul></li><li><p><strong>核心逻辑</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 全局变量：当前正在运行的副作用（仅在副作用执行期间有效）</span><br><span class="hljs-keyword">let</span> activeEffect;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">track</span>(<span class="hljs-params">target, key</span>) &#123;<br>  <span class="hljs-comment">// 只有当存在活跃的副作用时才进行追踪</span><br>  <span class="hljs-keyword">if</span> (activeEffect) &#123;<br>    <span class="hljs-comment">// 1. 查找目标对象 target 中 key 对应的副作用集合</span><br>    <span class="hljs-keyword">const</span> effects = <span class="hljs-title function_">getSubscribersForProperty</span>(target, key);<br>    <span class="hljs-comment">// 2. 将当前活跃的副作用添加到该集合中</span><br>    effects.<span class="hljs-title function_">add</span>(activeEffect);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>依赖存储结构</strong>：<code>WeakMap&lt;target, Map&lt;key, Set&lt;effect&gt;&gt;&gt;</code><br><code>track()</code> 需要一个全局的数据结构来保存 “目标对象→属性→副作用集合” 的映射关系，具体结构为：</p><ul><li><strong>外层：<code>WeakMap&lt;target, Map&gt;</code></strong>：键是响应式对象（<code>target</code>），值是一个 Map（存储该对象所有属性的副作用）。</li><li><strong>中层：<code>Map&lt;key, Set&lt;effect&gt;&gt;</code></strong>：键是对象的属性名（<code>key</code>），值是一个 Set（存储依赖该属性的所有副作用）。</li><li><strong>内层：<code>Set&lt;effect&gt;</code></strong>：存储依赖该属性的所有副作用函数（确保副作用不重复）。</li></ul><p><code>getSubscribersForProperty(target, key)</code> 函数的作用就是根据这个结构查找或创建副作用集合：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 伪代码：获取属性对应的副作用集合</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getSubscribersForProperty</span>(<span class="hljs-params">target, key</span>) &#123;<br>  <span class="hljs-comment">// 1. 为目标对象创建一个 Map（若不存在）</span><br>  <span class="hljs-keyword">const</span> targetMap = globalWeakMap.<span class="hljs-title function_">get</span>(target) || <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>();<br>  <span class="hljs-keyword">if</span> (!globalWeakMap.<span class="hljs-title function_">has</span>(target)) &#123;<br>    globalWeakMap.<span class="hljs-title function_">set</span>(target, targetMap);<br>  &#125;<br>  <span class="hljs-comment">// 2. 为属性创建一个 Set（若不存在）</span><br>  <span class="hljs-keyword">const</span> effectSet = targetMap.<span class="hljs-title function_">get</span>(key) || <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>();<br>  <span class="hljs-keyword">if</span> (!targetMap.<span class="hljs-title function_">has</span>(key)) &#123;<br>    targetMap.<span class="hljs-title function_">set</span>(key, effectSet);<br>  &#125;<br>  <span class="hljs-keyword">return</span> effectSet;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>关键：<code>activeEffect</code> 的作用</strong>：<code>activeEffect</code> 是一个全局变量，仅在副作用函数执行期间被赋值为当前副作用。这使得 <code>track()</code> 能精准识别 “谁正在依赖这个属性”，并将其加入依赖集合。</p></li></ul><h4 id="（2）更新触发：trigger-target-key-的作用与实现细节"><a href="#（2）更新触发：trigger-target-key-的作用与实现细节" class="headerlink" title="（2）更新触发：trigger(target, key) 的作用与实现细节"></a>（2）更新触发：<code>trigger(target, key)</code> 的作用与实现细节</h4><p><code>trigger()</code> 的核心任务是：<strong>当响应式数据的属性被修改时，找到该属性的所有依赖副作用，并执行这些副作用</strong>，从而实现 “数据变化→自动更新”。</p><ul><li><p><strong>触发时机</strong>：<code>trigger()</code> 会在响应式对象的属性被修改（即触发 <code>set</code> 拦截器）时调用。例如：</p><ul><li>修改 <code>reactive</code> 对象的属性（如 <code>obj.foo = 2</code>）时，Proxy 的 <code>set</code> 方法会调用 <code>trigger(obj, &#39;foo&#39;)</code>。</li><li>修改 <code>ref</code> 的 <code>value</code> 属性（如 <code>count.value = 2</code>）时，<code>set value(newValue)</code> 会调用 <code>trigger(refObject, &#39;value&#39;)</code>。</li></ul></li><li><p><strong>核心逻辑</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">trigger</span>(<span class="hljs-params">target, key</span>) &#123;<br>  <span class="hljs-comment">// 1. 查找目标对象 target 中 key 对应的副作用集合</span><br>  <span class="hljs-keyword">const</span> effects = <span class="hljs-title function_">getSubscribersForProperty</span>(target, key);<br>  <span class="hljs-comment">// 2. 执行所有副作用（重新运行依赖该属性的代码）</span><br>  effects.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">effect</span>) =&gt;</span> <span class="hljs-title function_">effect</span>());<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>执行副作用的意义</strong>：副作用函数通常包含依赖数据的计算或操作（如更新 DOM、计算属性值等）。当数据变化时，重新执行副作用能确保这些操作基于最新数据执行，从而保持视图或计算结果与数据的同步。例如，在组件渲染场景中，副作用函数是组件的渲染函数：当数据变化时，<code>trigger()</code> 会触发渲染函数重新执行，生成新的虚拟 DOM 并更新页面。</p></li></ul><h4 id="（3）track-与-trigger-的协同流程示例"><a href="#（3）track-与-trigger-的协同流程示例" class="headerlink" title="（3）track() 与 trigger() 的协同流程示例"></a>（3）<code>track()</code> 与 <code>trigger()</code> 的协同流程示例</h4><p>以一个简单的响应式场景为例，完整流程如下：</p><ol><li><p><strong>初始化响应式数据</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> count = <span class="hljs-title function_">ref</span>(<span class="hljs-number">0</span>); <span class="hljs-comment">// 创建 ref，内部通过 getter/setter 拦截 value 访问</span><br></code></pre></td></tr></table></figure></li><li><p><strong>创建响应式副作用</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">watchEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-comment">// 副作用函数：依赖 count.value，用于更新 DOM</span><br>  <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">`Count: <span class="hljs-subst">$&#123;count.value&#125;</span>`</span>;<br>&#125;);<br></code></pre></td></tr></table></figure><ul><li><code>watchEffect</code> 会包装副作用函数，执行前将其设为 <code>activeEffect</code>（<code>activeEffect = 当前副作用</code>）。</li><li>执行副作用时，访问 <code>count.value</code> 触发 <code>get</code> 拦截器，调用 <code>track(count, &#39;value&#39;)</code>。</li><li><code>track()</code> 发现 <code>activeEffect</code> 存在，将该副作用加入 <code>count</code> 的 <code>value</code> 属性对应的副作用集合中。</li></ul></li><li><p><strong>修改数据触发更新</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">count.<span class="hljs-property">value</span> = <span class="hljs-number">1</span>; <span class="hljs-comment">// 修改 value，触发 set 拦截器</span><br></code></pre></td></tr></table></figure><ul><li><code>set</code> 拦截器调用 <code>trigger(count, &#39;value&#39;)</code>。</li><li><code>trigger()</code> 找到 <code>count.value</code> 对应的副作用集合，执行该副作用函数。</li><li>副作用函数重新执行，基于最新的 <code>count.value</code> 更新 DOM，页面显示 <code>Count: 1</code>。</li></ul></li></ol><h4 id="（4）关键特性与边界情况"><a href="#（4）关键特性与边界情况" class="headerlink" title="（4）关键特性与边界情况"></a>（4）关键特性与边界情况</h4><ul><li><strong>精准触发</strong>：<code>track()</code> 只追踪当前活跃的副作用，<code>trigger()</code> 只执行被追踪的副作用，确保更新仅影响真正依赖数据的部分，避免不必要的性能消耗。</li><li><strong>去重处理</strong>：使用 <code>Set</code> 存储副作用，避免同一副作用被重复添加，确保每次数据变化时副作用只执行一次。</li><li><strong>嵌套副作用</strong>：若副作用函数内部又创建了新的副作用（如组件嵌套场景），<code>activeEffect</code> 会动态更新为当前执行的副作用，确保依赖关系正确嵌套。</li></ul><h3 id="3-响应式副作用"><a href="#3-响应式副作用" class="headerlink" title="3. 响应式副作用"></a>3. 响应式副作用</h3><ul><li><p>副作用：依赖响应式数据、并在数据变化时需重新执行的函数（如更新 DOM、计算结果等）。</p></li><li><p>Vue 通过<code>watchEffect()</code>创建响应式副作用，其原理是包装副作用函数，执行前将自身设为 “活跃副作用”，使<code>track()</code>能识别并关联依赖：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">whenDepsChange</span>(<span class="hljs-params">update</span>) &#123;<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">effect</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    activeEffect = effect; <span class="hljs-comment">// 标记当前活跃副作用</span><br>    <span class="hljs-title function_">update</span>(); <span class="hljs-comment">// 执行副作用（触发依赖追踪）</span><br>    activeEffect = <span class="hljs-literal">null</span>;<br>  &#125;;<br>  <span class="hljs-title function_">effect</span>(); <span class="hljs-comment">// 首次执行，建立依赖关系</span><br>&#125;<br></code></pre></td></tr></table></figure><p>示例：使用<code>watchEffect</code>自动更新计算结果：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">A0</span> = <span class="hljs-title function_">ref</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">A1</span> = <span class="hljs-title function_">ref</span>(<span class="hljs-number">1</span>);<br><span class="hljs-title function_">watchEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">A2</span> = <span class="hljs-variable constant_">A0</span>.<span class="hljs-property">value</span> + <span class="hljs-variable constant_">A1</span>.<span class="hljs-property">value</span>; <span class="hljs-comment">// 追踪A0、A1</span><br>&#125;);<br><span class="hljs-variable constant_">A0</span>.<span class="hljs-property">value</span> = <span class="hljs-number">2</span>; <span class="hljs-comment">// 触发副作用，重新计算A2</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="4-计算属性（computed）"><a href="#4-计算属性（computed）" class="headerlink" title="4. 计算属性（computed）"></a>4. 计算属性（<code>computed</code>）</h3><p>内部基于响应式副作用实现：当依赖变化时，自动重新计算结果，且会缓存计算值（依赖未变时直接返回缓存）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">A2</span> = <span class="hljs-title function_">computed</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-variable constant_">A0</span>.<span class="hljs-property">value</span> + <span class="hljs-variable constant_">A1</span>.<span class="hljs-property">value</span>); <span class="hljs-comment">// 依赖A0、A1，自动更新</span><br></code></pre></td></tr></table></figure><h2 id="核心逻辑总结"><a href="#核心逻辑总结" class="headerlink" title="核心逻辑总结"></a>核心逻辑总结</h2><p>Vue 响应式系统通过 Proxy&#x2F;getter 拦截属性读写，用<code>track()</code>记录依赖（副作用），用<code>trigger()</code>在数据变化时触发副作用重新执行，实现 “数据变化→自动更新” 的声明式效果。<code>reactive</code>用于对象，<code>ref</code>用于原始值，<code>watchEffect</code>和<code>computed</code>则是基于此机制的高层 API。通过<code>track()</code>和<code>trigger()</code>的配合，Vue 实现了 “数据驱动” 的核心特性：开发者只需关注数据变化，响应式系统会自动完成依赖追踪和更新触发，大幅简化了状态管理逻辑。</p>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习笔记</tag>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue3 笔记：响应式基础</title>
    <link href="/2025/08/16/Vue3-%E5%93%8D%E5%BA%94%E5%BC%8F%E5%9F%BA%E7%A1%80/"/>
    <url>/2025/08/16/Vue3-%E5%93%8D%E5%BA%94%E5%BC%8F%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<p>最近翻 Vue3 文档，重新过了一遍响应式的基础内容。之前用的时候总有些细节记不清，比如 ref 和 reactive 到底该怎么选、为什么有时候改了数据页面不更，这次特意整理了笔记（过程中也借助了大模型辅助梳理逻辑、补充细节😉），主要是给自己后续查着方便，内容以复习要点为主，可能有理解不到位的地方，先记下来慢慢修正。</p><p>官方文档：<a href="https://cn.vuejs.org/guide/essentials/reactivity-fundamentals.html">响应式基础 | Vue.js (vuejs.org)</a></p><h2 id="一-声明响应式状态"><a href="#一-声明响应式状态" class="headerlink" title="一. 声明响应式状态"></a>一. 声明响应式状态</h2><h3 id="1-组合式-API：ref"><a href="#1-组合式-API：ref" class="headerlink" title="1. 组合式 API：ref()"></a>1. 组合式 API：ref()</h3><p>定义：ref() 接收参数，并将其包裹在一个带有 .value 属性的 ref 对象中返回：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">const</span> count = <span class="hljs-title function_">ref</span>(<span class="hljs-number">0</span>)<br>count.<span class="hljs-property">value</span>++ <span class="hljs-comment">// 修改值</span><br></code></pre></td></tr></table></figure><ul><li>模板使用：无需 .value，自动解包；可直接在事件监听器中修改（如@click&#x3D;”count++”）。</li><li>优势：支持所有数据类型（原始值、对象等），可传递给函数并保持响应性。</li><li>简化语法：在<code>&lt;script setup&gt;</code>中，顶层声明的ref和方法可直接在模板使用，无需手动暴露。</li></ul><blockquote><p>注意：在 JavaScript 中需要 .value 来访问和修改 ref 的值。</p></blockquote><h3 id="2-组合式-API：reactive"><a href="#2-组合式-API：reactive" class="headerlink" title="2. 组合式 API：reactive()"></a>2. 组合式 API：reactive()</h3><p>定义：reactive()接收对象 &#x2F; 数组等，返回其响应式代理（Proxy），直接通过属性访问 &#x2F; 修改。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; reactive &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">const</span> state = <span class="hljs-title function_">reactive</span>(&#123; <span class="hljs-attr">count</span>: <span class="hljs-number">0</span> &#125;)<br>state.<span class="hljs-property">count</span>++ <span class="hljs-comment">// 修改值</span><br></code></pre></td></tr></table></figure><p>特性：代理与原始对象不等价（reactive(raw) !&#x3D;&#x3D; raw），同一原始对象多次调用reactive()返回同一代理。</p><h2 id="二-核心特性"><a href="#二-核心特性" class="headerlink" title="二. 核心特性"></a>二. 核心特性</h2><h3 id="1-深层响应式"><a href="#1-深层响应式" class="headerlink" title="1. 深层响应式"></a>1. 深层响应式</h3><p>默认行为：ref()和reactive()均默认实现深层响应性，嵌套对象 &#x2F; 数组的修改会被追踪。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> obj = <span class="hljs-title function_">ref</span>(&#123; <span class="hljs-attr">nested</span>: &#123; <span class="hljs-attr">count</span>: <span class="hljs-number">0</span> &#125; &#125;)<br>obj.<span class="hljs-property">value</span>.<span class="hljs-property">nested</span>.<span class="hljs-property">count</span>++ <span class="hljs-comment">// 触发响应式更新</span><br></code></pre></td></tr></table></figure><p>浅层响应性：可通过shallowRef（仅.value访问被追踪）或shallowReactive（仅顶层属性响应式）关闭深层响应性，优化性能。</p><h3 id="2-DOM-更新时机"><a href="#2-DOM-更新时机" class="headerlink" title="2. DOM 更新时机"></a>2. DOM 更新时机</h3><p>异步更新：Vue 会在“next tick”更新周期中缓冲所有状态的修改，以确保不管你进行了多少次状态修改，每个组件都只会被更新一次。<br>等待更新：需在 DOM 更新后执行代码时，使用nextTick()：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">increment</span>(<span class="hljs-params"></span>) &#123;<br>  count.<span class="hljs-property">value</span>++<br>  <span class="hljs-keyword">await</span> <span class="hljs-title function_">nextTick</span>() <span class="hljs-comment">// 此时DOM已更新</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="三-reactive-的局限性"><a href="#三-reactive-的局限性" class="headerlink" title="三. reactive() 的局限性"></a>三. reactive() 的局限性</h2><p>reactive() API 有一些局限性：</p><ul><li><p>有限的值类型：它只能用于对象类型 (对象、数组和如 Map、Set 这样的集合类型)。它不能持有如 string、number 或 boolean 这样的原始类型。</p></li><li><p>不能替换整个对象：由于 Vue 的响应式跟踪是通过属性访问实现的，因此我们必须始终保持对响应式对象的相同引用。这意味着我们不能轻易地“替换”响应式对象，因为这样的话与第一个引用的响应性连接将丢失。</p></li><li><p>对解构操作不友好：解构属性为本地变量或传递给函数时，响应性连接断开。</p></li></ul><blockquote><p>Vue官方建议：优先使用ref()作为响应式状态声明的主要 API。</p></blockquote><h2 id="四-ref-解包细节"><a href="#四-ref-解包细节" class="headerlink" title="四. ref 解包细节"></a>四. ref 解包细节</h2><p>作为 reactive 对象的属性：自动解包，行为类似普通属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> count = <span class="hljs-title function_">ref</span>(<span class="hljs-number">0</span>)<br><span class="hljs-keyword">const</span> state = <span class="hljs-title function_">reactive</span>(&#123; count &#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(state.<span class="hljs-property">count</span>) <span class="hljs-comment">// 0（自动解包）</span><br>state.<span class="hljs-property">count</span> = <span class="hljs-number">1</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(count.<span class="hljs-property">value</span>) <span class="hljs-comment">// 1</span><br></code></pre></td></tr></table></figure><p>数组 &#x2F; 集合中：不会自动解包，需显式使用.value。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> books = <span class="hljs-title function_">reactive</span>([<span class="hljs-title function_">ref</span>(<span class="hljs-string">&#x27;Vue Guide&#x27;</span>)])<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(books[<span class="hljs-number">0</span>].<span class="hljs-property">value</span>) <span class="hljs-comment">// 需显式.value</span><br></code></pre></td></tr></table></figure><p>模板中：仅顶级属性自动解包，嵌套属性需解构为顶级属性才能解包。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> object = &#123; <span class="hljs-attr">id</span>: <span class="hljs-title function_">ref</span>(<span class="hljs-number">1</span>) &#125;<br><span class="hljs-keyword">const</span> &#123; id &#125; = object <span class="hljs-comment">// 解构为顶级属性</span><br></code></pre></td></tr></table></figure><p>模板中<code>&#123;&#123; id + 1 &#125;&#125;</code>生效（解包），而<code>&#123;&#123; object.id + 1 &#125;&#125;</code>不生效（未解包）。</p><p>如果 ref 是文本插值的最终计算值 (即 <code>&#123;&#123; &#125;&#125;</code> 标签)，会自动解包。该特性仅仅是文本插值的一个便利特性，等价于 <code>&#123;&#123; object.id.value &#125;&#125;</code>。</p><h2 id="五、关键问题"><a href="#五、关键问题" class="headerlink" title="五、关键问题"></a>五、关键问题</h2><h3 id="为什么-ref-需要-value-访问？"><a href="#为什么-ref-需要-value-访问？" class="headerlink" title="为什么 ref 需要 .value 访问？"></a>为什么 ref 需要 .value 访问？</h3><p>因为在标准的 JavaScript 中，检测普通变量的访问和修改是行不通的。但可以通过 getter 和 setter 方法来拦截对象属性的 get 和 set 操作。</p><p>而 ref 的设计思路是：用一个对象包裹原始值，这个对象只暴露一个 <code>.value</code> 属性。通过为 <code>.value</code> 定义 getter 和 setter，Vue 就能在你访问 <code>xxx.value</code> 时追踪依赖（收集谁在用这个值），在你修改 <code>xxx.value = ...</code> 时触发更新（通知用到这个值的地方重新渲染）。</p><p>简单说，<code>.value</code> 是 Vue 为了让原始类型也能具备响应式，而 “绕的一小步”—— 通过对象属性的拦截能力，间接实现对原始值的追踪。</p><h3 id="ref-和reactive-的核心区别是什么？"><a href="#ref-和reactive-的核心区别是什么？" class="headerlink" title="ref()和reactive()的核心区别是什么？"></a>ref()和reactive()的核心区别是什么？</h3><p>① 支持类型：ref()支持所有数据类型（原始值、对象等），reactive()仅支持对象、数组等非原始类型；<br>② 访问方式：ref()需通过.value访问 &#x2F; 修改值，reactive()直接通过属性访问；<br>③ 局限性：reactive()存在无法替换对象、解构丢失响应性等问题，ref()无这些限制；<br>④ 解包规则：ref()在模板中自动解包，作为响应式对象属性时也自动解包，而reactive()无类似解包逻辑。</p><h3 id="为什么修改响应式状态后-DOM-没有立即更新？如何确保在-DOM-更新后执行代码？"><a href="#为什么修改响应式状态后-DOM-没有立即更新？如何确保在-DOM-更新后执行代码？" class="headerlink" title="为什么修改响应式状态后 DOM 没有立即更新？如何确保在 DOM 更新后执行代码？"></a>为什么修改响应式状态后 DOM 没有立即更新？如何确保在 DOM 更新后执行代码？</h3><p>Vue 会将所有状态修改缓冲到 “next tick” 更新周期中，确保每个组件只更新一次，提升性能。若需在 DOM 更新后执行代码，可使用nextTick()全局 API，它返回一个 Promise，在 DOM 更新完成后 resolve。示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; nextTick &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">update</span>(<span class="hljs-params"></span>) &#123;<br>  count.<span class="hljs-property">value</span>++<br>  <span class="hljs-keyword">await</span> <span class="hljs-title function_">nextTick</span>()<br>  <span class="hljs-comment">// DOM已更新</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="在模板中使用ref时，为什么有时需要显式-value，有时不需要？"><a href="#在模板中使用ref时，为什么有时需要显式-value，有时不需要？" class="headerlink" title="在模板中使用ref时，为什么有时需要显式.value，有时不需要？"></a>在模板中使用ref时，为什么有时需要显式.value，有时不需要？</h3><p>模板中ref的解包规则为：<br>① 顶级属性自动解包（无需.value），如<code>const count = ref(0)</code>在模板中<code>&#123;&#123; count &#125;&#125;</code>生效；<br>② 嵌套属性（如<code>object.id</code>，其中id是ref）不会自动解包，需解构为顶级属性（<code>const &#123; id &#125; = object</code>）才能解包；<br>③ 若ref是文本插值的最终值（如<code>&#123;&#123; object.id &#125;&#125;</code>），会自动解包（等价于<code>&#123;&#123; object.id.value &#125;&#125;</code>）。因此，非顶级嵌套ref在模板中参与计算时需先解构，否则需显式处理。</p><h3 id="浅层响应性的核心适用场景是什么？"><a href="#浅层响应性的核心适用场景是什么？" class="headerlink" title="浅层响应性的核心适用场景是什么？"></a>浅层响应性的核心适用场景是什么？</h3><p><strong>核心适用场景：数据 “大而不变” 或 “仅需整体替换”</strong><br>当数据满足以下特征时，用浅层响应性可以显著提升性能：</p><p><strong>处理 “大型不可变数据”（如后端返回的海量列表）</strong><br><strong>场景</strong>：从后端获取的大型列表（如 1000 条以上数据），且业务中只需要展示、不需要修改其中的嵌套属性（仅可能整体替换列表）。<br><strong>问题</strong>：如果用普通ref或reactive，Vue 会递归地将所有嵌套属性转为响应式（创建大量 Proxy），导致初始化时性能开销大。<br><strong>解决方案</strong>：用shallowRef，只追踪.value的整体替换，不处理内部属性：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; shallowRef &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-comment">// 假设data是包含1000条数据的大型数组</span><br><span class="hljs-keyword">const</span> bigList = <span class="hljs-title function_">shallowRef</span>(data) <br><br><span class="hljs-comment">// ✅ 有效：整体替换时触发更新（符合业务需求）</span><br>bigList.<span class="hljs-property">value</span> = newData <br><br><span class="hljs-comment">// ❌ 无效：修改内部属性不会触发更新（但业务本就不需要修改）</span><br>bigList.<span class="hljs-property">value</span>[<span class="hljs-number">0</span>].<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;新名字&#x27;</span> <br></code></pre></td></tr></table></figure><p><strong>管理 “纯展示性的复杂对象”（如配置项、图表数据）</strong><br><strong>场景</strong>：页面中的配置对象（如表单布局配置、图表的 option），结构复杂但运行中不会修改嵌套属性，只会整体替换。<br><strong>问题</strong>：深层响应性会对嵌套的每个对象 &#x2F; 数组创建 Proxy，而这些 Proxy 完全用不上，属于浪费。<br><strong>解决方案</strong>：用shallowReactive（对象）或shallowRef（整体替换）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; shallowReactive &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-comment">// 复杂配置对象，仅用于展示，不修改内部属性</span><br><span class="hljs-keyword">const</span> chartOptions = <span class="hljs-title function_">shallowReactive</span>(&#123;<br>  <span class="hljs-attr">xAxis</span>: &#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;category&#x27;</span> &#125;,<br>  <span class="hljs-attr">series</span>: [&#123; <span class="hljs-attr">data</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>] &#125;]<br>&#125;)<br><br><span class="hljs-comment">// ✅ 有效：修改顶层属性会触发更新（如果需要）</span><br>chartOptions.<span class="hljs-property">xAxis</span> = &#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;value&#x27;</span> &#125;<br><br><span class="hljs-comment">// ❌ 无效：修改嵌套属性不触发更新（业务不需要）</span><br>chartOptions.<span class="hljs-property">series</span>[<span class="hljs-number">0</span>].<span class="hljs-property">data</span>.<span class="hljs-title function_">push</span>(<span class="hljs-number">4</span>) <br></code></pre></td></tr></table></figure><p><strong>手动控制更新时机（避免频繁触发）</strong><br><strong>场景</strong>：需要批量修改数据，且希望 “修改完所有内容后再统一更新 DOM”，而不是每改一个属性就更新一次。<br><strong>问题</strong>：普通响应式会在每次修改时触发更新，批量操作时可能导致多次无用渲染。<br><strong>解决方案</strong>：用shallowRef配合triggerRef（手动触发更新）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; shallowRef, triggerRef &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">const</span> formData = <span class="hljs-title function_">shallowRef</span>(&#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">0</span> &#125;)<br><br><span class="hljs-comment">// 批量修改（不会触发更新）</span><br>formData.<span class="hljs-property">value</span>.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;张三&#x27;</span><br>formData.<span class="hljs-property">value</span>.<span class="hljs-property">age</span> = <span class="hljs-number">20</span><br><span class="hljs-comment">// ...更多修改</span><br><br><span class="hljs-comment">// 手动触发一次更新（减少渲染次数）</span><br><span class="hljs-title function_">triggerRef</span>(formData) <br></code></pre></td></tr></table></figure><p><strong>不适用场景：警惕 “过度优化”</strong><br>浅层响应性的 “性能优化” 是有代价的 —— 丢失了深层追踪能力，因此以下场景绝对不能用：</p><ul><li>数据需要修改嵌套属性（如用户信息对象{ user: { name: ‘xxx’ } }，需要修改name）；</li><li>数据结构简单（如仅包含 1-2 层的小对象），此时深层响应性的性能开销可忽略，没必要用浅层；</li><li>新手对响应式原理不熟悉，容易因 “修改不触发更新” 导致 bug。</li></ul><blockquote><p>浅层响应性是 “按需关闭深层追踪” 的优化手段，核心适用场景是：<br><strong>数据结构复杂但仅需整体替换，或嵌套属性完全不需要修改。</strong><br>它的设计不是为了 “替代” 普通响应式，而是在特定场景下（如处理大型数据）减少不必要的性能消耗，属于 “进阶优化技巧”，需结合具体业务判断是否使用。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习笔记</tag>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker学习笔记(三)：部署MySQL</title>
    <link href="/2025/08/14/Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%B8%89/"/>
    <url>/2025/08/14/Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%B8%89/</url>
    
    <content type="html"><![CDATA[<p>在之前的服务器环境中，手动安装并配置MySQL的过程较为繁琐，因此我转而采用Docker容器化方案进行部署，通过标准化镜像和持久化存储机制，实现了更高效的数据库环境管理与版本控制。</p><p>这篇笔记就记录下用 Docker 部署 MySQL 的全过程，给自己留个存档。</p><h2 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h2><h3 id="1-搜索MySQL镜像（可选）"><a href="#1-搜索MySQL镜像（可选）" class="headerlink" title="1. 搜索MySQL镜像（可选）"></a>1. 搜索MySQL镜像（可选）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker search mysql<br></code></pre></td></tr></table></figure><p>❌问题：搜索出现超时，配置了国内镜像源也没用</p><h3 id="2-拉取MySQL-5-7镜像"><a href="#2-拉取MySQL-5-7镜像" class="headerlink" title="2. 拉取MySQL 5.7镜像"></a>2. 拉取MySQL 5.7镜像</h3><p>因为听说指定版本拉取更稳妥，避免后续出现版本兼容问题，所以我选择了 5.7 版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull mysql:5.7<br></code></pre></td></tr></table></figure><h3 id="3-创建MySQL目录"><a href="#3-创建MySQL目录" class="headerlink" title="3. 创建MySQL目录"></a>3. 创建MySQL目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p ~/mysql/&#123;<span class="hljs-built_in">log</span>,data,conf&#125;<br><br><span class="hljs-comment"># 进入创建好的mysql目录</span><br><span class="hljs-built_in">cd</span> ~/mysql<br></code></pre></td></tr></table></figure><ul><li><p>log目录打算用来存 MySQL 的运行日志</p></li><li><p>data目录很重要，用来存数据库的数据，这样就算容器没了，数据也还在</p></li><li><p>conf目录用来放一些自定义的配置文件</p></li></ul><h2 id="二、部署MySQL容器"><a href="#二、部署MySQL容器" class="headerlink" title="二、部署MySQL容器"></a>二、部署MySQL容器</h2><h3 id="1-运行MySQL容器"><a href="#1-运行MySQL容器" class="headerlink" title="1. 运行MySQL容器"></a>1. 运行MySQL容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -p 3307:3306 --name mysql \<br>-v <span class="hljs-variable">$PWD</span>/log:/var/log/mysql \<br>-v <span class="hljs-variable">$PWD</span>/data:/var/lib/mysql \<br>-v <span class="hljs-variable">$PWD</span>/conf:/etc/mysql/conf.d \<br>-e MYSQL_ROOT_PASSWORD=123456 \<br>-d mysql:5.7<br></code></pre></td></tr></table></figure><p>✅ <strong>参数说明</strong>：</p><ul><li>-p 3307:3306&#96;：端口映射（宿主机 3307 端口 → 容器 3306 端口，避免与宿主机本地 MySQL 冲突）</li><li><code>--name mysql</code>：容器命名（便于后续操作）</li><li><code>-v</code>：目录挂载（实现宿主机与容器文件共享，保障数据持久化）</li><li><code>-e MYSQL_ROOT_PASSWORD=123456</code>：设置 root 用户密码</li><li><code>-d</code>：后台运行容器</li><li><code>mysql:5.7</code>：指定使用的镜像</li><li><strong><code>$PWD</code><strong>它会动态记录你在终端中当前所在的目录的</strong>绝对路径</strong>，因为我们已经进入了mysql目录，所以这里是&#x2F;root&#x2F;mysql</li></ul><h3 id="2-连接MySQL容器"><a href="#2-连接MySQL容器" class="headerlink" title="2. 连接MySQL容器"></a>2. 连接MySQL容器</h3><p>在容器内部，使用 root 用户登录 MySQL：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 进入运行中的容器</span><br>docker <span class="hljs-built_in">exec</span> -it mysql bash<br><br><span class="hljs-comment"># 在容器内登录MySQL（注意：密码输入时无回显，输入完成直接回车）</span><br>mysql -u root -p<br><span class="hljs-comment"># 输入密码：123456（之前设置的root密码）</span><br></code></pre></td></tr></table></figure><p>⚠️ <strong>注意</strong>：密码参数<code>-p</code>后无空格，直接接密码</p><h2 id="三、创建远程访问用户并授权"><a href="#三、创建远程访问用户并授权" class="headerlink" title="三、创建远程访问用户并授权"></a>三、创建远程访问用户并授权</h2><p>执行以下 SQL 命令创建一个允许远程访问的用户（以用户名 admin为例）：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 创建用户（允许所有IP访问）</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">USER</span> <span class="hljs-string">&#x27;admin&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> IDENTIFIED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;your_password&#x27;</span>;<br><br><span class="hljs-comment">-- 授予所有权限（根据需要调整权限范围）</span><br><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">ALL</span> PRIVILEGES <span class="hljs-keyword">ON</span> <span class="hljs-operator">*</span>.<span class="hljs-operator">*</span> <span class="hljs-keyword">TO</span> <span class="hljs-string">&#x27;admin&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> <span class="hljs-keyword">WITH</span> <span class="hljs-keyword">GRANT</span> OPTION;<br><br><span class="hljs-comment">-- 刷新权限使设置生效</span><br>FLUSH PRIVILEGES;<br></code></pre></td></tr></table></figure><p><strong>权限说明</strong>：</p><ul><li>‘%’ 表示允许从任何 IP 地址访问</li><li>如果你想限制特定 IP，可以将 % 替换为具体 IP，例如 ‘192.168.1.100’</li><li><em>.</em> 表示所有数据库的所有表，可根据需要限制为特定数据库，例如 appdb.*</li><li>ALL PRIVILEGES 可以替换为具体权限，如 SELECT,INSERT,UPDATE</li></ul><h2 id="补充：容器与镜像意外删后的恢复方法"><a href="#补充：容器与镜像意外删后的恢复方法" class="headerlink" title="补充：容器与镜像意外删后的恢复方法"></a>补充：容器与镜像意外删后的恢复方法</h2><p>在使用 Docker 的过程中，偶尔可能会误删容器或镜像，不必惊慌，只要我们做好了数据持久化，恢复工作会非常简单。以下是具体的恢复方法：</p><h3 id="1-容器被误删后的恢复"><a href="#1-容器被误删后的恢复" class="headerlink" title="1. 容器被误删后的恢复"></a>1. 容器被误删后的恢复</h3><p>如果只是删除了容器（<code>docker rm</code>），但数据卷（volume）和镜像还在，恢复步骤如下：</p><p><strong>步骤1：确认数据目录是否完好</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 检查之前挂载的数据目录</span><br><span class="hljs-built_in">ls</span> -l ~/mysql/data<br></code></pre></td></tr></table></figure><p>如果能看到数据库文件（如 ibdata1、ib_logfile0 等），说明数据没有丢失</p><p><strong>步骤2：重新创建并启动容器</strong><br>使用与之前相同的运行命令即可，Docker 会自动使用现有数据目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -p 3307:3306 --name mysql \<br>-v ~/mysql/log:/var/log/mysql \<br>-v ~/mysql/data:/var/lib/mysql \<br>-v ~/mysql/conf:/etc/mysql/conf.d \<br>-e MYSQL_ROOT_PASSWORD=123456 \<br>-d mysql:5.7<br></code></pre></td></tr></table></figure><p>新容器会直接读取已有的数据文件，恢复到删除前的状态</p><h3 id="2-镜像被误删后的恢复"><a href="#2-镜像被误删后的恢复" class="headerlink" title="2. 镜像被误删后的恢复"></a>2. 镜像被误删后的恢复</h3><p>Docker 中，<strong>镜像被删除的前提是关联容器已停止并删除</strong>（否则会提示 “容器正在使用镜像”，无法删除）。因此镜像误删时，容器必然已不存在，需重新拉取镜像并重建容器。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">(base) [root@iZ7xvcxkgs6i5l3z060714Z ~]# docker rmi mysql:5.7<br>Error response from daemon: conflict: unable to remove repository reference <span class="hljs-string">&quot;mysql:5.7&quot;</span> (must force) - container 60d1ed6c60a6 is using its referenced image 5107333e08a8<br></code></pre></td></tr></table></figure><p>恢复步骤：</p><p><strong>步骤1：重新拉取相同版本的镜像</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull mysql:5.7<br></code></pre></td></tr></table></figure><p><strong>步骤2：基于原有数据目录重建容器</strong></p><h3 id="3-预防措施"><a href="#3-预防措施" class="headerlink" title="3. 预防措施"></a>3. 预防措施</h3><p>恢复的前提是 “数据未丢失”，因此提前预防比事后恢复更重要。建议做好以下 3 点：</p><p><strong>3.1 定期备份数据目录</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 压缩备份数据目录</span><br><span class="hljs-comment"># 格式：tar -zcvf 备份文件名 目标目录</span><br>tar -zcvf mysql_backup_$(<span class="hljs-built_in">date</span> +%Y%m%d).tar.gz ~/mysql/data<br></code></pre></td></tr></table></figure><p><strong>如何从备份恢复</strong>？</p><p>如果数据目录丢失，可从备份文件恢复：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 解压备份到数据目录（确保目录存在）</span><br>tar -zxvf ~/mysql_backup_20250815.tar.gz -C ~/mysql/<br><span class="hljs-comment"># 解压后会自动覆盖~/mysql/data目录，再重建容器即可</span><br></code></pre></td></tr></table></figure><p><strong>3.2 导出容器配置</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建启动脚本</span><br><span class="hljs-built_in">cat</span> &gt; start_mysql.sh &lt;&lt; <span class="hljs-string">&#x27;EOF&#x27;</span><br><span class="hljs-comment">#!/bin/bash</span><br>docker run -p 3307:3306 --name mysql \<br>-v ~/mysql/log:/var/log/mysql \<br>-v ~/mysql/data:/var/lib/mysql \<br>-v ~/mysql/conf:/etc/mysql/conf.d \<br>-e MYSQL_ROOT_PASSWORD=123456 \<br>-d mysql:5.7<br>EOF<br><br><span class="hljs-comment"># 赋予执行权限</span><br><span class="hljs-built_in">chmod</span> +x start_mysql.sh<br></code></pre></td></tr></table></figure><p><strong>3.3 慎用删除命令</strong><br>执行删除操作前先确认：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看所有容器（包括停止的）</span><br>docker ps -a<br><span class="hljs-comment"># 查看所有镜像</span><br>docker images<br></code></pre></td></tr></table></figure><h2 id="四、小结"><a href="#四、小结" class="headerlink" title="四、小结"></a>四、小结</h2><p>通过Docker容器化部署MySQL，我成功解决了手动安装配置MySQL的繁琐问题，实现了数据库环境的快速部署与管理。同时，容器化还带来了环境隔离、版本控制、迁移方便等优势，为后续的应用开发提供了更可靠的基础。</p><p>其他软件如Nginx、Redis、Tomcat等也可以采用类似的方式进行容器化部署，极大地简化了应用的运维管理。</p>]]></content>
    
    
    <categories>
      
      <category>容器技术</category>
      
      <category>Docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
      <tag>学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker学习笔记(二)：容器数据卷</title>
    <link href="/2025/08/14/Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%BA%8C/"/>
    <url>/2025/08/14/Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%BA%8C/</url>
    
    <content type="html"><![CDATA[<h2 id="一、数据卷核心概念"><a href="#一、数据卷核心概念" class="headerlink" title="一、数据卷核心概念"></a>一、数据卷核心概念</h2><h3 id="1-1-定义"><a href="#1-1-定义" class="headerlink" title="1.1 定义"></a>1.1 定义</h3><p><strong>数据卷是宿主机文件系统中的一个目录或文件</strong>，通过挂载机制与容器内指定路径关联，实现宿主机与容器的双向数据共享。</p><h3 id="1-2-本质"><a href="#1-2-本质" class="headerlink" title="1.2 本质"></a>1.2 本质</h3><ul><li>类似Linux的<code>mount</code>命令，容器访问挂载路径时实际操作的是宿主机数据卷</li><li>数据卷独立于容器生命周期，容器删除后数据仍保存在宿主机</li></ul><h2 id="二、数据卷的三大核心作用"><a href="#二、数据卷的三大核心作用" class="headerlink" title="二、数据卷的三大核心作用"></a>二、数据卷的三大核心作用</h2><p>数据卷的设计初衷，就是为了解决容器与数据分离的问题，其核心作用可以概括为三点：</p><h3 id="2-1-容器数据持久化"><a href="#2-1-容器数据持久化" class="headerlink" title="2.1 容器数据持久化"></a>2.1 容器数据持久化</h3><ul><li><strong>场景</strong>：数据库、日志文件等需要长期保存的数据</li><li><strong>案例</strong>：MySQL容器挂载数据卷后，即使容器崩溃，数据库文件仍可通过数据卷恢复</li></ul><h3 id="2-2-宿主机与容器双向交互"><a href="#2-2-宿主机与容器双向交互" class="headerlink" title="2.2 宿主机与容器双向交互"></a>2.2 宿主机与容器双向交互</h3><ul><li><strong>实时同步特性</strong>：<ul><li>宿主机修改卷目录文件 → 容器内立即生效（如本地代码编辑后容器热更新）</li><li>容器生成数据（日志、配置）→ 实时同步到宿主机（方便本地查看分析）</li></ul></li></ul><h3 id="2-3-多容器数据共享"><a href="#2-3-多容器数据共享" class="headerlink" title="2.3 多容器数据共享"></a>2.3 多容器数据共享</h3><ul><li><strong>场景</strong>：前端容器与后端容器共享静态资源、多个服务共享配置文件</li><li><strong>案例</strong>：Nginx（展示静态页）与Node.js（生成静态页）通过数据卷自动同步资源</li></ul><h2 id="三、数据卷的基础操作实践"><a href="#三、数据卷的基础操作实践" class="headerlink" title="三、数据卷的基础操作实践"></a>三、数据卷的基础操作实践</h2><h3 id="3-1-创建并挂载数据卷（基础命令）"><a href="#3-1-创建并挂载数据卷（基础命令）" class="headerlink" title="3.1 创建并挂载数据卷（基础命令）"></a>3.1 创建并挂载数据卷（基础命令）</h3><p>使用docker run命令时，通过-v参数可以直接创建并挂载数据卷：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 语法：docker run -v 宿主机路径:容器内路径 [其他参数] 镜像名</span><br>docker run -d \<br>  -p 8080:80 \<br>  -v /root/nginx/myapp:/usr/share/nginx/html \  <span class="hljs-comment"># 挂载数据卷</span><br>  --name mynginx \<br>  nginx<br></code></pre></td></tr></table></figure><p>上述命令的含义是：</p><ul><li><p>启动一个名为mynginx的 Nginx 容器；</p></li><li><p>将宿主机的&#x2F;root&#x2F;nginx&#x2F;myapp目录（若不存在会自动创建）挂载到容器内的&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html（Nginx 默认静态文件目录）；</p></li><li><p>此时在宿主机&#x2F;root&#x2F;nginx&#x2F;myapp中放入index.html，访问<a href="http://localhost:8080/">http://localhost:8080</a>即可看到页面。</p></li></ul><h3 id="3-2-查看挂载详情"><a href="#3-2-查看挂载详情" class="headerlink" title="3.2. 查看挂载详情"></a>3.2. 查看挂载详情</h3><p>通过docker inspect命令可以查看容器的挂载详情：​</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker inspect mynginx​<br></code></pre></td></tr></table></figure><p>在输出的 JSON 结果中，找到Mounts字段，会显示如下信息：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-string">&quot;Mounts&quot;</span>: [​<br>    &#123;​<br>        <span class="hljs-string">&quot;Type&quot;</span>: <span class="hljs-string">&quot;bind&quot;</span>,​<br>        <span class="hljs-string">&quot;Source&quot;</span>: <span class="hljs-string">&quot;/root/nginx/myapp&quot;</span>,  <span class="hljs-comment">// 宿主机目录​</span><br>        <span class="hljs-string">&quot;Destination&quot;</span>: <span class="hljs-string">&quot;/usr/share/nginx/html&quot;</span>,  <span class="hljs-comment">// 容器内目录​</span><br>        <span class="hljs-string">&quot;Mode&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>        <span class="hljs-string">&quot;RW&quot;</span>: <span class="hljs-literal">true</span>,  <span class="hljs-comment">// 读写权限（默认可读写）​</span><br>        <span class="hljs-string">&quot;Propagation&quot;</span>: <span class="hljs-string">&quot;rprivate&quot;</span>​<br>    &#125;​<br>]​<br></code></pre></td></tr></table></figure><h2 id="四、数据卷容器：简化多容器共享场景"><a href="#四、数据卷容器：简化多容器共享场景" class="headerlink" title="四、数据卷容器：简化多容器共享场景"></a>四、数据卷容器：简化多容器共享场景</h2><p>当多个容器需要共享数据时，逐一为每个容器配置-v参数会显得繁琐。<strong>数据卷容器</strong>（Volume Container）正是为简化这种场景而生。</p><h3 id="4-1-什么是数据卷容器？"><a href="#4-1-什么是数据卷容器？" class="headerlink" title="4.1 什么是数据卷容器？"></a>4.1 什么是数据卷容器？</h3><ul><li>专门用于管理数据卷的 “中介容器”，其他容器通过<code>--volumes-from</code>继承其挂载配置</li><li>优势：简化多容器挂载配置，统一管理数据卷路径</li></ul><h3 id="4-2-使用步骤"><a href="#4-2-使用步骤" class="headerlink" title="4.2 使用步骤"></a>4.2 使用步骤</h3><h4 id="步骤-1：创建数据卷容器"><a href="#步骤-1：创建数据卷容器" class="headerlink" title="步骤 1：创建数据卷容器"></a>步骤 1：创建数据卷容器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建仅用于挂载数据卷的容器（无需运行服务）</span><br>docker run -it \<br>  -v /data:/shared-data \  <span class="hljs-comment"># 定义数据卷</span><br>  --name volume-container \  <span class="hljs-comment"># 命名数据卷容器</span><br>  ubuntu /bin/bash<br></code></pre></td></tr></table></figure><h4 id="步骤-2：其他容器继承挂载配置"><a href="#步骤-2：其他容器继承挂载配置" class="headerlink" title="步骤 2：其他容器继承挂载配置"></a>步骤 2：其他容器继承挂载配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 容器A继承数据卷</span><br>docker run -it --volumes-from volume-container --name container-A ubuntu /bin/bash<br><br><span class="hljs-comment"># 容器B继承数据卷（与A共享同一数据卷）</span><br>docker run -it --volumes-from volume-container --name container-B ubuntu /bin/bash<br></code></pre></td></tr></table></figure><ul><li><strong>效果</strong>：容器 A、B 与宿主机<code>/data</code>目录实时同步数据</li></ul><h3 id="4-3-注意事项"><a href="#4-3-注意事项" class="headerlink" title="4.3 注意事项"></a>4.3 注意事项</h3><ol><li>数据卷容器停止 &#x2F; 删除后，其他容器仍可正常使用数据卷</li><li>彻底清理数据卷需手动删除宿主机对应目录（如<code>/data</code>）</li><li>可多层继承（容器 A 继承自数据卷容器，容器 B 继承自容器 A）</li></ol><h2 id="五、复习要点总结"><a href="#五、复习要点总结" class="headerlink" title="五、复习要点总结"></a>五、复习要点总结</h2><ol><li><strong>核心目标</strong>：解决 “容器临时性” 与 “数据持久性” 的矛盾</li><li><strong>基础命令</strong>：<code>-v</code>挂载、<code>docker inspect</code>查看、<code>--volumes-from</code>继承</li><li><strong>关键区别</strong>：<ul><li>普通挂载：直接指定宿主机路径（适合单容器）</li><li>数据卷容器：通过中介容器管理（适合多容器共享）</li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>容器技术</category>
      
      <category>Docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
      <tag>学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker学习笔记(一)：Docker常用命令</title>
    <link href="/2025/08/13/Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%B8%80/"/>
    <url>/2025/08/13/Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%B8%80/</url>
    
    <content type="html"><![CDATA[<p>整理了 Docker 核心命令的用法，从服务管理到容器操作，方便后续复习查阅。</p><h2 id="一、Docker服务基础操作（守护进程管理）"><a href="#一、Docker服务基础操作（守护进程管理）" class="headerlink" title="一、Docker服务基础操作（守护进程管理）"></a>一、Docker服务基础操作（守护进程管理）</h2><h3 id="1-1-服务启停控制"><a href="#1-1-服务启停控制" class="headerlink" title="1.1 服务启停控制"></a>1.1 服务启停控制</h3><ul><li>启动：<code>systemctl start docker</code><br>✅ 核心功能：启动Docker守护进程（dockerd），初始化镜像&#x2F;容器管理环境<br>⚠️ 注意：启动失败用<code>journalctl -u docker</code>查日志  </li><li>停止：<code>systemctl stop docker</code><br>✅ 核心功能：终止守护进程及所有运行中容器<br>⚠️ 注意：先手动停止重要容器，避免数据未持久化  </li><li>重启：<code>systemctl restart docker</code><br>✅ 核心场景：修改配置文件（如<code>/etc/docker/daemon.json</code>）后生效</li></ul><h3 id="1-2-服务状态查询"><a href="#1-2-服务状态查询" class="headerlink" title="1.2 服务状态查询"></a>1.2 服务状态查询</h3><ul><li>命令：<code>systemctl status docker</code><br>✅ 核心功能：查看服务运行状态及最近日志<br>🔍 状态解读：  <ul><li>绿色<code>active (running)</code>：正常运行  </li><li>红色<code>inactive (dead)</code>：已停止</li></ul></li></ul><h2 id="二、镜像操作命令（Image）"><a href="#二、镜像操作命令（Image）" class="headerlink" title="二、镜像操作命令（Image）"></a>二、镜像操作命令（Image）</h2><h3 id="2-1-镜像获取与搜索"><a href="#2-1-镜像获取与搜索" class="headerlink" title="2.1 镜像获取与搜索"></a>2.1 镜像获取与搜索</h3><ul><li><p>拉取镜像：<code>docker pull &lt;镜像名:标签&gt;</code><br>✅ 核心功能：从远程仓库下载镜像（默认Docker Hub）<br>🔍 格式示例：<code>docker pull mysql:8.0</code>（指定版本，推荐生产环境使用）<br>⚠️ 注意：<code>latest</code>标签可能随时间变化，避免生产环境直接使用  </p></li><li><p>搜索镜像：<code>docker search &lt;关键词&gt;</code><br>✅ 核心功能：在Docker Hub检索镜像<br>🔍 结果解读：<code>OFFICIAL=OK</code>为官方镜像（安全性更高）<br>❌ 常见问题：网络超时（<code>i/o timeout</code>）→ 需配置国内镜像源</p></li></ul><h3 id="2-2-镜像管理与查询"><a href="#2-2-镜像管理与查询" class="headerlink" title="2.2 镜像管理与查询"></a>2.2 镜像管理与查询</h3><ul><li><p>查看本地镜像：<code>docker images</code><br>✅ 核心功能：列出本地所有镜像信息<br>🔍 输出解读：<code>REPOSITORY</code>（仓库名）、<code>TAG</code>（版本）、<code>IMAGE ID</code>（唯一标识）<br>⚡ 快捷用法：<code>docker images -q</code>（仅输出镜像ID，用于批量操作）  </p></li><li><p>查看镜像详情：<code>docker inspect &lt;镜像ID/名称&gt;</code><br>✅ 核心功能：获取镜像完整元数据（构建历史、环境变量等）</p></li></ul><h3 id="2-3-镜像删除"><a href="#2-3-镜像删除" class="headerlink" title="2.3 镜像删除"></a>2.3 镜像删除</h3><ul><li>命令：<code>docker rmi &lt;镜像ID/名称&gt;</code><br>✅ 核心功能：删除本地镜像<br>⚠️ 注意：若镜像被容器引用（即使容器已停止），需先删除容器<br>⚡ 强制删除：<code>docker rmi -f &lt;镜像ID&gt;</code>（不推荐，可能残留数据）</li></ul><h2 id="三、容器操作命令（Container）"><a href="#三、容器操作命令（Container）" class="headerlink" title="三、容器操作命令（Container）"></a>三、容器操作命令（Container）</h2><h3 id="3-1-容器创建与启动"><a href="#3-1-容器创建与启动" class="headerlink" title="3.1 容器创建与启动"></a>3.1 容器创建与启动</h3><ul><li><p>新建并启动：<code>docker run [参数] &lt;镜像名&gt;</code><br>✅ 核心功能：基于镜像创建并启动容器（&#x3D; 新建+启动）<br>⚡ 必学参数：  </p><ul><li><code>-d</code>：后台运行（不占用终端）  </li><li><code>-p 主机端口:容器端口</code>：端口映射（如<code>-p 8080:80</code>）  </li><li><code>--name &lt;名称&gt;</code>：指定容器名（避免随机名称）  </li><li><code>-it</code>：交互式终端（如<code>docker run -it ubuntu /bin/bash</code>）</li></ul></li><li><p>启动已停止容器：<code>docker start &lt;容器ID/名称&gt;</code><br>✅ 核心区别：<code>start</code>用于“启动已存在容器”，<code>run</code>用于“新建+启动”</p></li></ul><h3 id="3-2-容器查看与进入"><a href="#3-2-容器查看与进入" class="headerlink" title="3.2 容器查看与进入"></a>3.2 容器查看与进入</h3><ul><li><p>查看容器列表：  </p><ul><li><code>docker ps</code>：查看运行中容器  </li><li><code>docker ps -a</code>：查看所有容器（含已停止）  </li><li><code>docker ps -q</code>：仅输出容器ID（批量操作如<code>docker stop $(docker ps -q)</code>）</li></ul></li><li><p>进入运行中容器：<code>docker exec -it &lt;容器ID/名称&gt; &lt;终端命令&gt;</code><br>✅ 示例：<code>docker exec -it my-nginx /bin/bash</code>（进入bash终端）<br>⚠️ 注意：需容器处于运行状态，<code>-it</code>参数缺一不可（保持交互）</p></li></ul><h3 id="3-3-容器停止与销毁"><a href="#3-3-容器停止与销毁" class="headerlink" title="3.3 容器停止与销毁"></a>3.3 容器停止与销毁</h3><ul><li><p>停止容器：<code>docker stop &lt;容器ID/名称&gt;</code><br>✅ 核心功能：优雅停止（发送SIGTERM信号，允许保存数据）<br>⚡ 强制停止：<code>docker kill &lt;容器ID&gt;</code>（发送SIGKILL，紧急情况使用）  </p></li><li><p>删除容器：<code>docker rm &lt;容器ID/名称&gt;</code><br>✅ 核心功能：删除已停止容器<br>⚠️ 注意：运行中容器需先停止，或用<code>docker rm -f &lt;容器ID&gt;</code>强制删除（谨慎使用）</p></li></ul><h3 id="3-4-容器详情查询"><a href="#3-4-容器详情查询" class="headerlink" title="3.4 容器详情查询"></a>3.4 容器详情查询</h3><ul><li>命令：<code>docker inspect &lt;容器ID/名称&gt;</code><br>✅ 核心用途：查看IP地址、挂载路径等关键信息（如<code>NetworkSettings.IPAddress</code>）</li></ul><h2 id="四、常见问题与易错点"><a href="#四、常见问题与易错点" class="headerlink" title="四、常见问题与易错点"></a>四、常见问题与易错点</h2><h3 id="4-1-网络问题"><a href="#4-1-网络问题" class="headerlink" title="4.1 网络问题"></a>4.1 网络问题</h3><ul><li>现象：拉取&#x2F;搜索镜像超时（<code>i/o timeout</code>）  </li><li>解决：配置国内镜像源（如阿里云、网易），修改<code>/etc/docker/daemon.json</code>后重启服务</li></ul><h3 id="4-2-命令混淆"><a href="#4-2-命令混淆" class="headerlink" title="4.2 命令混淆"></a>4.2 命令混淆</h3><table><thead><tr><th>易混淆命令</th><th>核心区别</th></tr></thead><tbody><tr><td><code>docker run</code> vs <code>docker start</code></td><td><code>run</code>&#x3D;新建+启动；<code>start</code>&#x3D;启动已存在容器</td></tr><tr><td><code>docker stop</code> vs <code>docker kill</code></td><td><code>stop</code>优雅停止；<code>kill</code>强制终止</td></tr><tr><td><code>docker rmi</code> vs <code>docker rm</code></td><td><code>rmi</code>删镜像；<code>rm</code>删容器</td></tr></tbody></table><h2 id="五、学习小结"><a href="#五、学习小结" class="headerlink" title="五、学习小结"></a>五、学习小结</h2><h3 id="核心逻辑链"><a href="#核心逻辑链" class="headerlink" title="核心逻辑链"></a>核心逻辑链</h3><p>服务（daemon）→ 镜像（模板）→ 容器（运行实例），操作需按“启动服务→管理镜像→操作容器”递进  </p><h3 id="后续重点"><a href="#后续重点" class="headerlink" title="后续重点"></a>后续重点</h3><ol><li>配置国内镜像源，解决网络问题  </li><li>学习数据卷（<code>volume</code>），解决容器数据持久化  </li><li>实战部署（Nginx&#x2F;MySQL），练习命令组合使用</li></ol>]]></content>
    
    
    <categories>
      
      <category>容器技术</category>
      
      <category>Docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
      <tag>学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决SpringBoot中Lombok注解失效的那些坑</title>
    <link href="/2025/08/13/%E8%A7%A3%E5%86%B3SpringBoot%E4%B8%ADLombok%E6%B3%A8%E8%A7%A3%E5%A4%B1%E6%95%88%E7%9A%84%E9%82%A3%E4%BA%9B%E5%9D%91/"/>
    <url>/2025/08/13/%E8%A7%A3%E5%86%B3SpringBoot%E4%B8%ADLombok%E6%B3%A8%E8%A7%A3%E5%A4%B1%E6%95%88%E7%9A%84%E9%82%A3%E4%BA%9B%E5%9D%91/</url>
    
    <content type="html"><![CDATA[<p>在 SpringBoot 项目开发中，Lombok 注解突然失效是一个很常见的问题，表现为明明添加了 @Data 等注解，却在编译时出现 “找不到符号”（如缺失 getter&#x2F;setter 方法）的错误。本文记录了我在项目中遇到该问题的排查过程，分析了 Lombok 注解失效与 Maven 编译插件（maven-compiler-plugin）配置、版本管理之间的关系，并总结了可行的解决方案和最佳实践。</p><span id="more"></span><p>在开发SpringBoot项目时，相信很多同学都遇到过Lombok注解突然失效的问题：代码里明明加了<code>@Data</code>注解，编译时却报”找不到符号”（比如缺失getter&#x2F;setter方法）。最近我在项目中就遇到了类似问题，通过排查终于找到原因，在这里记录一下整个过程和解决方案。</p><h2 id="问题现象"><a href="#问题现象" class="headerlink" title="问题现象"></a>问题现象</h2><p>项目中使用了Lombok的<code>@Data</code>、<code>@Getter</code>等注解，但编译时出现一系列”找不到符号”错误：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-function">java: 找不到符号</span><br><span class="hljs-function">  符号:   变量 <span class="hljs-title">log</span></span><br><span class="hljs-function">  位置: 类 <span class="hljs-title">org.hnu.tablerecognition.common.interceptor.JwtTokenInterceptor</span></span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-title">java</span>: 找不到符号</span><br><span class="hljs-function">  符号:   方法 <span class="hljs-title">getRoleId</span>()</span><br><span class="hljs-function">  位置: 类型为<span class="hljs-title">xxx.UpdateRoleMenuDto</span>的变量 <span class="hljs-title">updateRoleMenuDto</span></span><br></code></pre></td></tr></table></figure><p>检查代码发现实体类确实添加了<code>@Data</code>注解，依赖也已引入，这就让人很困惑了。</p><h2 id="项目环境与配置"><a href="#项目环境与配置" class="headerlink" title="项目环境与配置"></a>项目环境与配置</h2><p>先看看我的项目依赖配置（pom.xml关键部分）：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.4.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- Lombok依赖 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 其他依赖... --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 显式配置的编译插件 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">annotationProcessorPaths</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">path</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 注意这里没有指定version --&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">annotationProcessorPaths</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-comment">&lt;!-- 配置... --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>经过排查，发现问题主要出在三个方面：</p><h3 id="1-Lombok版本管理问题"><a href="#1-Lombok版本管理问题" class="headerlink" title="1. Lombok版本管理问题"></a>1. Lombok版本管理问题</h3><p>SpringBoot的<code>spring-boot-starter-parent</code>会统一管理大部分官方 starters 的版本，但<strong>Lombok并非SpringBoot官方组件</strong>，所以其版本不会被parent默认管理。</p><p>当在pom.xml中不指定Lombok版本时，Maven会尝试从依赖链中查找版本，但如果没有其他依赖间接引入Lombok，会导致：</p><ul><li>依赖版本缺失</li><li>引入低版本或不兼容版本</li></ul><p>这会直接导致编译时无法解析Lombok注解，出现”找不到符号”错误。</p><h3 id="2-maven-compiler-plugin的配置冲突"><a href="#2-maven-compiler-plugin的配置冲突" class="headerlink" title="2. maven-compiler-plugin的配置冲突"></a>2. maven-compiler-plugin的配置冲突</h3><p><code>maven-compiler-plugin</code>是Maven的编译插件，负责将Java源代码编译为字节码。我的问题就出在显式配置了这个插件，但存在两个问题：</p><ul><li>在<code>&lt;annotationProcessorPaths&gt;</code>中指定了Lombok却没有显式声明版本</li><li>手动配置覆盖了SpringBoot父工程的默认配置</li></ul><h3 id="3-Lombok的工作原理"><a href="#3-Lombok的工作原理" class="headerlink" title="3. Lombok的工作原理"></a>3. Lombok的工作原理</h3><p>Lombok通过<strong>Java注解处理器（Annotation Processor）</strong> 在编译时动态生成代码（如getter&#x2F;setter）。要使其生效，编译器必须能找到Lombok的注解处理器（包含在lombok.jar中）。</p><p>Maven中有两种方式指定注解处理器：</p><ul><li>显式配置：通过<code>maven-compiler-plugin</code>的<code>&lt;annotationProcessorPaths&gt;</code>指定</li><li>默认机制：自动从项目依赖中寻找包含注解处理器的JAR包</li></ul><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>注释掉手动配置的<code>maven-compiler-plugin</code>后，问题得到解决：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 注释掉手动配置的编译插件 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- &lt;plugin&gt;</span><br><span class="hljs-comment">      &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="hljs-comment">      &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span><br><span class="hljs-comment">      &lt;configuration&gt;</span><br><span class="hljs-comment">        &lt;annotationProcessorPaths&gt;</span><br><span class="hljs-comment">          &lt;path&gt;</span><br><span class="hljs-comment">            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="hljs-comment">            &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="hljs-comment">          &lt;/path&gt;</span><br><span class="hljs-comment">        &lt;/annotationProcessorPaths&gt;</span><br><span class="hljs-comment">      &lt;/configuration&gt;</span><br><span class="hljs-comment">    &lt;/plugin&gt; --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-comment">&lt;!-- 配置... --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><p>为什么这样就行？因为：</p><ol><li><p><strong>SpringBoot父工程已包含默认配置</strong>：<code>spring-boot-starter-parent</code>已经内置了<code>maven-compiler-plugin</code>的默认配置，包括对注解处理器的支持</p></li><li><p><strong>默认机制会自动发现Lombok</strong>：Lombok的JAR包中包含<code>META-INF/services/javax.annotation.processing.Processor</code>文件，声明了它是注解处理器，父工程的默认配置会自动扫描并使用</p></li><li><p><strong>避免了版本冲突</strong>：注释掉手动配置后，Maven会使用依赖中声明的Lombok版本，不会出现版本不匹配问题</p></li></ol><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><p>为了避免类似问题，总结几个最佳实践：</p><ol><li><p><strong>明确指定Lombok版本</strong>：即使依赖管理正常，显式指定版本也能提高项目稳定性</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.24<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span> <span class="hljs-comment">&lt;!-- 明确版本 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p><strong>正确配置IDE</strong>：确保IDEA安装了Lombok插件并启用注解处理器</p><ul><li>安装插件：<code>File -&gt; Settings -&gt; Plugins</code>搜索Lombok</li><li>启用注解处理：<code>File -&gt; Settings -&gt; Build, Execution, Deployment -&gt; Compiler -&gt; Annotation Processors</code>勾选<code>Enable annotation processing</code></li></ul></li><li><p><strong>合理使用父工程配置</strong>：对于SpringBoot项目，优先使用<code>spring-boot-starter-parent</code>提供的默认配置，除非有特殊需求，否则不要重复声明<code>maven-compiler-plugin</code></p></li><li><p><strong>需要自定义编译配置时</strong>：如果必须手动配置<code>maven-compiler-plugin</code>，确保注解处理器路径配置完整</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">annotationProcessorPaths</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">path</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.24<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span> <span class="hljs-comment">&lt;!-- 与依赖版本一致 --&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">annotationProcessorPaths</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Lombok注解失效问题看似复杂，实则大多与版本管理和编译配置有关。理解Maven的依赖管理机制、注解处理器工作原理以及SpringBoot父工程的默认配置，能帮助我们快速定位并解决这类问题。</p><p>记住：大多数时候，使用SpringBoot提供的默认配置就足够了，不要过度自定义配置，以免引入不必要的问题。</p>]]></content>
    
    
    <categories>
      
      <category>问题解决</category>
      
      <category>SpringBoot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>Lombok</tag>
      
      <tag>Bug</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/08/09/hello-world/"/>
    <url>/2025/08/09/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
