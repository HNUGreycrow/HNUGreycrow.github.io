<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Docker学习笔记(二)：容器数据卷</title>
    <link href="/2025/08/14/Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%BA%8C/"/>
    <url>/2025/08/14/Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%BA%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="Docker学习笔记-二-：容器数据卷"><a href="#Docker学习笔记-二-：容器数据卷" class="headerlink" title="Docker学习笔记(二)：容器数据卷"></a>Docker学习笔记(二)：容器数据卷</h1><h2 id="一、数据卷核心概念"><a href="#一、数据卷核心概念" class="headerlink" title="一、数据卷核心概念"></a>一、数据卷核心概念</h2><h3 id="1-1-定义"><a href="#1-1-定义" class="headerlink" title="1.1 定义"></a>1.1 定义</h3><p><strong>数据卷是宿主机文件系统中的一个目录或文件</strong>，通过挂载机制与容器内指定路径关联，实现宿主机与容器的双向数据共享。</p><h3 id="1-2-本质"><a href="#1-2-本质" class="headerlink" title="1.2 本质"></a>1.2 本质</h3><ul><li>类似Linux的<code>mount</code>命令，容器访问挂载路径时实际操作的是宿主机数据卷</li><li>数据卷独立于容器生命周期，容器删除后数据仍保存在宿主机</li></ul><h2 id="二、数据卷的三大核心作用"><a href="#二、数据卷的三大核心作用" class="headerlink" title="二、数据卷的三大核心作用"></a>二、数据卷的三大核心作用</h2><p>数据卷的设计初衷，就是为了解决容器与数据分离的问题，其核心作用可以概括为三点：</p><h3 id="2-1-容器数据持久化"><a href="#2-1-容器数据持久化" class="headerlink" title="2.1 容器数据持久化"></a>2.1 容器数据持久化</h3><ul><li><strong>场景</strong>：数据库、日志文件等需要长期保存的数据</li><li><strong>案例</strong>：MySQL容器挂载数据卷后，即使容器崩溃，数据库文件仍可通过数据卷恢复</li></ul><h3 id="2-2-宿主机与容器双向交互"><a href="#2-2-宿主机与容器双向交互" class="headerlink" title="2.2 宿主机与容器双向交互"></a>2.2 宿主机与容器双向交互</h3><ul><li><strong>实时同步特性</strong>：<ul><li>宿主机修改卷目录文件 → 容器内立即生效（如本地代码编辑后容器热更新）</li><li>容器生成数据（日志、配置）→ 实时同步到宿主机（方便本地查看分析）</li></ul></li></ul><h3 id="2-3-多容器数据共享"><a href="#2-3-多容器数据共享" class="headerlink" title="2.3 多容器数据共享"></a>2.3 多容器数据共享</h3><ul><li><strong>场景</strong>：前端容器与后端容器共享静态资源、多个服务共享配置文件</li><li><strong>案例</strong>：Nginx（展示静态页）与Node.js（生成静态页）通过数据卷自动同步资源</li></ul><h2 id="三、数据卷的基础操作实践"><a href="#三、数据卷的基础操作实践" class="headerlink" title="三、数据卷的基础操作实践"></a>三、数据卷的基础操作实践</h2><h3 id="3-1-创建并挂载数据卷（基础命令）"><a href="#3-1-创建并挂载数据卷（基础命令）" class="headerlink" title="3.1 创建并挂载数据卷（基础命令）"></a>3.1 创建并挂载数据卷（基础命令）</h3><p>使用docker run命令时，通过-v参数可以直接创建并挂载数据卷：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 语法：docker run -v 宿主机路径:容器内路径 [其他参数] 镜像名</span><br>docker run -d \<br>  -p 8080:80 \<br>  -v /root/nginx/myapp:/usr/share/nginx/html \  <span class="hljs-comment"># 挂载数据卷</span><br>  --name mynginx \<br>  nginx<br></code></pre></td></tr></table></figure><p>上述命令的含义是：</p><ul><li><p>启动一个名为mynginx的 Nginx 容器；</p></li><li><p>将宿主机的&#x2F;root&#x2F;nginx&#x2F;myapp目录（若不存在会自动创建）挂载到容器内的&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html（Nginx 默认静态文件目录）；</p></li><li><p>此时在宿主机&#x2F;home&#x2F;myapp中放入index.html，访问<a href="http://localhost:8080/">http://localhost:8080</a>即可看到页面。</p></li></ul><h3 id="3-2-查看挂载详情"><a href="#3-2-查看挂载详情" class="headerlink" title="3.2. 查看挂载详情"></a>3.2. 查看挂载详情</h3><p>通过docker inspect命令可以查看容器的挂载详情：​</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker inspect mynginx​<br></code></pre></td></tr></table></figure><p>在输出的 JSON 结果中，找到Mounts字段，会显示如下信息：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-string">&quot;Mounts&quot;</span>: [​<br>    &#123;​<br>        <span class="hljs-string">&quot;Type&quot;</span>: <span class="hljs-string">&quot;bind&quot;</span>,​<br>        <span class="hljs-string">&quot;Source&quot;</span>: <span class="hljs-string">&quot;/root/nginx/myapp&quot;</span>,  <span class="hljs-comment">// 宿主机目录​</span><br>        <span class="hljs-string">&quot;Destination&quot;</span>: <span class="hljs-string">&quot;/usr/share/nginx/html&quot;</span>,  <span class="hljs-comment">// 容器内目录​</span><br>        <span class="hljs-string">&quot;Mode&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>        <span class="hljs-string">&quot;RW&quot;</span>: <span class="hljs-literal">true</span>,  <span class="hljs-comment">// 读写权限（默认可读写）​</span><br>        <span class="hljs-string">&quot;Propagation&quot;</span>: <span class="hljs-string">&quot;rprivate&quot;</span>​<br>    &#125;​<br>]​<br></code></pre></td></tr></table></figure><h2 id="四、数据卷容器：简化多容器共享场景"><a href="#四、数据卷容器：简化多容器共享场景" class="headerlink" title="四、数据卷容器：简化多容器共享场景"></a>四、数据卷容器：简化多容器共享场景</h2><p>当多个容器需要共享数据时，逐一为每个容器配置-v参数会显得繁琐。<strong>数据卷容器</strong>（Volume Container）正是为简化这种场景而生。</p><h3 id="4-1-什么是数据卷容器？"><a href="#4-1-什么是数据卷容器？" class="headerlink" title="4.1 什么是数据卷容器？"></a>4.1 什么是数据卷容器？</h3><ul><li>专门用于管理数据卷的 “中介容器”，其他容器通过<code>--volumes-from</code>继承其挂载配置</li><li>优势：简化多容器挂载配置，统一管理数据卷路径</li></ul><h3 id="4-2-使用步骤"><a href="#4-2-使用步骤" class="headerlink" title="4.2 使用步骤"></a>4.2 使用步骤</h3><h4 id="步骤-1：创建数据卷容器"><a href="#步骤-1：创建数据卷容器" class="headerlink" title="步骤 1：创建数据卷容器"></a>步骤 1：创建数据卷容器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建仅用于挂载数据卷的容器（无需运行服务）</span><br>docker run -it \<br>  -v /data:/shared-data \  <span class="hljs-comment"># 定义数据卷</span><br>  --name volume-container \  <span class="hljs-comment"># 命名数据卷容器</span><br>  ubuntu /bin/bash<br></code></pre></td></tr></table></figure><h4 id="步骤-2：其他容器继承挂载配置"><a href="#步骤-2：其他容器继承挂载配置" class="headerlink" title="步骤 2：其他容器继承挂载配置"></a>步骤 2：其他容器继承挂载配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 容器A继承数据卷</span><br>docker run -it --volumes-from volume-container --name container-A ubuntu /bin/bash<br><br><span class="hljs-comment"># 容器B继承数据卷（与A共享同一数据卷）</span><br>docker run -it --volumes-from volume-container --name container-B ubuntu /bin/bash<br></code></pre></td></tr></table></figure><ul><li><strong>效果</strong>：容器 A、B 与宿主机<code>/data</code>目录实时同步数据</li></ul><h3 id="4-3-注意事项"><a href="#4-3-注意事项" class="headerlink" title="4.3 注意事项"></a>4.3 注意事项</h3><ol><li>数据卷容器停止 &#x2F; 删除后，其他容器仍可正常使用数据卷</li><li>彻底清理数据卷需手动删除宿主机对应目录（如<code>/data</code>）</li><li>可多层继承（容器 A 继承自数据卷容器，容器 B 继承自容器 A）</li></ol><h2 id="五、复习要点总结"><a href="#五、复习要点总结" class="headerlink" title="五、复习要点总结"></a>五、复习要点总结</h2><ol><li><strong>核心目标</strong>：解决 “容器临时性” 与 “数据持久性” 的矛盾</li><li><strong>基础命令</strong>：<code>-v</code>挂载、<code>docker inspect</code>查看、<code>--volumes-from</code>继承</li><li><strong>关键区别</strong>：<ul><li>普通挂载：直接指定宿主机路径（适合单容器）</li><li>数据卷容器：通过中介容器管理（适合多容器共享）</li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>容器技术</category>
      
      <category>Docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
      <tag>学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker学习笔记(一)：Docker常用命令</title>
    <link href="/2025/08/13/Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%B8%80/"/>
    <url>/2025/08/13/Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%B8%80/</url>
    
    <content type="html"><![CDATA[<h1 id="Docker学习笔记-一-：Docker常用命令"><a href="#Docker学习笔记-一-：Docker常用命令" class="headerlink" title="Docker学习笔记(一)：Docker常用命令"></a>Docker学习笔记(一)：Docker常用命令</h1><p>整理了 Docker 核心命令的用法，从服务管理到容器操作，方便后续复习查阅。</p><h2 id="一、Docker服务基础操作（守护进程管理）"><a href="#一、Docker服务基础操作（守护进程管理）" class="headerlink" title="一、Docker服务基础操作（守护进程管理）"></a>一、Docker服务基础操作（守护进程管理）</h2><h3 id="1-1-服务启停控制"><a href="#1-1-服务启停控制" class="headerlink" title="1.1 服务启停控制"></a>1.1 服务启停控制</h3><ul><li>启动：<code>systemctl start docker</code><br>✅ 核心功能：启动Docker守护进程（dockerd），初始化镜像&#x2F;容器管理环境<br>⚠️ 注意：启动失败用<code>journalctl -u docker</code>查日志  </li><li>停止：<code>systemctl stop docker</code><br>✅ 核心功能：终止守护进程及所有运行中容器<br>⚠️ 注意：先手动停止重要容器，避免数据未持久化  </li><li>重启：<code>systemctl restart docker</code><br>✅ 核心场景：修改配置文件（如<code>/etc/docker/daemon.json</code>）后生效</li></ul><h3 id="1-2-服务状态查询"><a href="#1-2-服务状态查询" class="headerlink" title="1.2 服务状态查询"></a>1.2 服务状态查询</h3><ul><li>命令：<code>systemctl status docker</code><br>✅ 核心功能：查看服务运行状态及最近日志<br>🔍 状态解读：  <ul><li>绿色<code>active (running)</code>：正常运行  </li><li>红色<code>inactive (dead)</code>：已停止</li></ul></li></ul><h2 id="二、镜像操作命令（Image）"><a href="#二、镜像操作命令（Image）" class="headerlink" title="二、镜像操作命令（Image）"></a>二、镜像操作命令（Image）</h2><h3 id="2-1-镜像获取与搜索"><a href="#2-1-镜像获取与搜索" class="headerlink" title="2.1 镜像获取与搜索"></a>2.1 镜像获取与搜索</h3><ul><li><p>拉取镜像：<code>docker pull &lt;镜像名:标签&gt;</code><br>✅ 核心功能：从远程仓库下载镜像（默认Docker Hub）<br>🔍 格式示例：<code>docker pull mysql:8.0</code>（指定版本，推荐生产环境使用）<br>⚠️ 注意：<code>latest</code>标签可能随时间变化，避免生产环境直接使用  </p></li><li><p>搜索镜像：<code>docker search &lt;关键词&gt;</code><br>✅ 核心功能：在Docker Hub检索镜像<br>🔍 结果解读：<code>OFFICIAL=OK</code>为官方镜像（安全性更高）<br>❌ 常见问题：网络超时（<code>i/o timeout</code>）→ 需配置国内镜像源</p></li></ul><h3 id="2-2-镜像管理与查询"><a href="#2-2-镜像管理与查询" class="headerlink" title="2.2 镜像管理与查询"></a>2.2 镜像管理与查询</h3><ul><li><p>查看本地镜像：<code>docker images</code><br>✅ 核心功能：列出本地所有镜像信息<br>🔍 输出解读：<code>REPOSITORY</code>（仓库名）、<code>TAG</code>（版本）、<code>IMAGE ID</code>（唯一标识）<br>⚡ 快捷用法：<code>docker images -q</code>（仅输出镜像ID，用于批量操作）  </p></li><li><p>查看镜像详情：<code>docker inspect &lt;镜像ID/名称&gt;</code><br>✅ 核心功能：获取镜像完整元数据（构建历史、环境变量等）</p></li></ul><h3 id="2-3-镜像删除"><a href="#2-3-镜像删除" class="headerlink" title="2.3 镜像删除"></a>2.3 镜像删除</h3><ul><li>命令：<code>docker rmi &lt;镜像ID/名称&gt;</code><br>✅ 核心功能：删除本地镜像<br>⚠️ 注意：若镜像被容器引用（即使容器已停止），需先删除容器<br>⚡ 强制删除：<code>docker rmi -f &lt;镜像ID&gt;</code>（不推荐，可能残留数据）</li></ul><h2 id="三、容器操作命令（Container）"><a href="#三、容器操作命令（Container）" class="headerlink" title="三、容器操作命令（Container）"></a>三、容器操作命令（Container）</h2><h3 id="3-1-容器创建与启动"><a href="#3-1-容器创建与启动" class="headerlink" title="3.1 容器创建与启动"></a>3.1 容器创建与启动</h3><ul><li><p>新建并启动：<code>docker run [参数] &lt;镜像名&gt;</code><br>✅ 核心功能：基于镜像创建并启动容器（&#x3D; 新建+启动）<br>⚡ 必学参数：  </p><ul><li><code>-d</code>：后台运行（不占用终端）  </li><li><code>-p 主机端口:容器端口</code>：端口映射（如<code>-p 8080:80</code>）  </li><li><code>--name &lt;名称&gt;</code>：指定容器名（避免随机名称）  </li><li><code>-it</code>：交互式终端（如<code>docker run -it ubuntu /bin/bash</code>）</li></ul></li><li><p>启动已停止容器：<code>docker start &lt;容器ID/名称&gt;</code><br>✅ 核心区别：<code>start</code>用于“启动已存在容器”，<code>run</code>用于“新建+启动”</p></li></ul><h3 id="3-2-容器查看与进入"><a href="#3-2-容器查看与进入" class="headerlink" title="3.2 容器查看与进入"></a>3.2 容器查看与进入</h3><ul><li><p>查看容器列表：  </p><ul><li><code>docker ps</code>：查看运行中容器  </li><li><code>docker ps -a</code>：查看所有容器（含已停止）  </li><li><code>docker ps -q</code>：仅输出容器ID（批量操作如<code>docker stop $(docker ps -q)</code>）</li></ul></li><li><p>进入运行中容器：<code>docker exec -it &lt;容器ID/名称&gt; &lt;终端命令&gt;</code><br>✅ 示例：<code>docker exec -it my-nginx /bin/bash</code>（进入bash终端）<br>⚠️ 注意：需容器处于运行状态，<code>-it</code>参数缺一不可（保持交互）</p></li></ul><h3 id="3-3-容器停止与销毁"><a href="#3-3-容器停止与销毁" class="headerlink" title="3.3 容器停止与销毁"></a>3.3 容器停止与销毁</h3><ul><li><p>停止容器：<code>docker stop &lt;容器ID/名称&gt;</code><br>✅ 核心功能：优雅停止（发送SIGTERM信号，允许保存数据）<br>⚡ 强制停止：<code>docker kill &lt;容器ID&gt;</code>（发送SIGKILL，紧急情况使用）  </p></li><li><p>删除容器：<code>docker rm &lt;容器ID/名称&gt;</code><br>✅ 核心功能：删除已停止容器<br>⚠️ 注意：运行中容器需先停止，或用<code>docker rm -f &lt;容器ID&gt;</code>强制删除（谨慎使用）</p></li></ul><h3 id="3-4-容器详情查询"><a href="#3-4-容器详情查询" class="headerlink" title="3.4 容器详情查询"></a>3.4 容器详情查询</h3><ul><li>命令：<code>docker inspect &lt;容器ID/名称&gt;</code><br>✅ 核心用途：查看IP地址、挂载路径等关键信息（如<code>NetworkSettings.IPAddress</code>）</li></ul><h2 id="四、常见问题与易错点"><a href="#四、常见问题与易错点" class="headerlink" title="四、常见问题与易错点"></a>四、常见问题与易错点</h2><h3 id="4-1-网络问题"><a href="#4-1-网络问题" class="headerlink" title="4.1 网络问题"></a>4.1 网络问题</h3><ul><li>现象：拉取&#x2F;搜索镜像超时（<code>i/o timeout</code>）  </li><li>解决：配置国内镜像源（如阿里云、网易），修改<code>/etc/docker/daemon.json</code>后重启服务</li></ul><h3 id="4-2-命令混淆"><a href="#4-2-命令混淆" class="headerlink" title="4.2 命令混淆"></a>4.2 命令混淆</h3><table><thead><tr><th>易混淆命令</th><th>核心区别</th></tr></thead><tbody><tr><td><code>docker run</code> vs <code>docker start</code></td><td><code>run</code>&#x3D;新建+启动；<code>start</code>&#x3D;启动已存在容器</td></tr><tr><td><code>docker stop</code> vs <code>docker kill</code></td><td><code>stop</code>优雅停止；<code>kill</code>强制终止</td></tr><tr><td><code>docker rmi</code> vs <code>docker rm</code></td><td><code>rmi</code>删镜像；<code>rm</code>删容器</td></tr></tbody></table><h2 id="五、学习小结"><a href="#五、学习小结" class="headerlink" title="五、学习小结"></a>五、学习小结</h2><h3 id="核心逻辑链"><a href="#核心逻辑链" class="headerlink" title="核心逻辑链"></a>核心逻辑链</h3><p>服务（daemon）→ 镜像（模板）→ 容器（运行实例），操作需按“启动服务→管理镜像→操作容器”递进  </p><h3 id="后续重点"><a href="#后续重点" class="headerlink" title="后续重点"></a>后续重点</h3><ol><li>配置国内镜像源，解决网络问题  </li><li>学习数据卷（<code>volume</code>），解决容器数据持久化  </li><li>实战部署（Nginx&#x2F;MySQL），练习命令组合使用</li></ol>]]></content>
    
    
    <categories>
      
      <category>容器技术</category>
      
      <category>Docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
      <tag>学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决SpringBoot中Lombok注解失效的那些坑</title>
    <link href="/2025/08/13/%E8%A7%A3%E5%86%B3SpringBoot%E4%B8%ADLombok%E6%B3%A8%E8%A7%A3%E5%A4%B1%E6%95%88%E7%9A%84%E9%82%A3%E4%BA%9B%E5%9D%91/"/>
    <url>/2025/08/13/%E8%A7%A3%E5%86%B3SpringBoot%E4%B8%ADLombok%E6%B3%A8%E8%A7%A3%E5%A4%B1%E6%95%88%E7%9A%84%E9%82%A3%E4%BA%9B%E5%9D%91/</url>
    
    <content type="html"><![CDATA[<p>在 SpringBoot 项目开发中，Lombok 注解突然失效是一个很常见的问题，表现为明明添加了 @Data 等注解，却在编译时出现 “找不到符号”（如缺失 getter&#x2F;setter 方法）的错误。本文记录了我在项目中遇到该问题的排查过程，分析了 Lombok 注解失效与 Maven 编译插件（maven-compiler-plugin）配置、版本管理之间的关系，并总结了可行的解决方案和最佳实践。</p><span id="more"></span><h1 id="解决SpringBoot中Lombok注解失效的那些坑"><a href="#解决SpringBoot中Lombok注解失效的那些坑" class="headerlink" title="解决SpringBoot中Lombok注解失效的那些坑"></a>解决SpringBoot中Lombok注解失效的那些坑</h1><p>在开发SpringBoot项目时，相信很多同学都遇到过Lombok注解突然失效的问题：代码里明明加了<code>@Data</code>注解，编译时却报”找不到符号”（比如缺失getter&#x2F;setter方法）。最近我在项目中就遇到了类似问题，通过排查终于找到原因，在这里记录一下整个过程和解决方案。</p><h2 id="问题现象"><a href="#问题现象" class="headerlink" title="问题现象"></a>问题现象</h2><p>项目中使用了Lombok的<code>@Data</code>、<code>@Getter</code>等注解，但编译时出现一系列”找不到符号”错误：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-function">java: 找不到符号</span><br><span class="hljs-function">  符号:   变量 <span class="hljs-title">log</span></span><br><span class="hljs-function">  位置: 类 <span class="hljs-title">org.hnu.tablerecognition.common.interceptor.JwtTokenInterceptor</span></span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-title">java</span>: 找不到符号</span><br><span class="hljs-function">  符号:   方法 <span class="hljs-title">getRoleId</span>()</span><br><span class="hljs-function">  位置: 类型为<span class="hljs-title">xxx.UpdateRoleMenuDto</span>的变量 <span class="hljs-title">updateRoleMenuDto</span></span><br></code></pre></td></tr></table></figure><p>检查代码发现实体类确实添加了<code>@Data</code>注解，依赖也已引入，这就让人很困惑了。</p><h2 id="项目环境与配置"><a href="#项目环境与配置" class="headerlink" title="项目环境与配置"></a>项目环境与配置</h2><p>先看看我的项目依赖配置（pom.xml关键部分）：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.4.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- Lombok依赖 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 其他依赖... --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 显式配置的编译插件 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">annotationProcessorPaths</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">path</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 注意这里没有指定version --&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">annotationProcessorPaths</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-comment">&lt;!-- 配置... --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>经过排查，发现问题主要出在三个方面：</p><h3 id="1-Lombok版本管理问题"><a href="#1-Lombok版本管理问题" class="headerlink" title="1. Lombok版本管理问题"></a>1. Lombok版本管理问题</h3><p>SpringBoot的<code>spring-boot-starter-parent</code>会统一管理大部分官方 starters 的版本，但<strong>Lombok并非SpringBoot官方组件</strong>，所以其版本不会被parent默认管理。</p><p>当在pom.xml中不指定Lombok版本时，Maven会尝试从依赖链中查找版本，但如果没有其他依赖间接引入Lombok，会导致：</p><ul><li>依赖版本缺失</li><li>引入低版本或不兼容版本</li></ul><p>这会直接导致编译时无法解析Lombok注解，出现”找不到符号”错误。</p><h3 id="2-maven-compiler-plugin的配置冲突"><a href="#2-maven-compiler-plugin的配置冲突" class="headerlink" title="2. maven-compiler-plugin的配置冲突"></a>2. maven-compiler-plugin的配置冲突</h3><p><code>maven-compiler-plugin</code>是Maven的编译插件，负责将Java源代码编译为字节码。我的问题就出在显式配置了这个插件，但存在两个问题：</p><ul><li>在<code>&lt;annotationProcessorPaths&gt;</code>中指定了Lombok却没有显式声明版本</li><li>手动配置覆盖了SpringBoot父工程的默认配置</li></ul><h3 id="3-Lombok的工作原理"><a href="#3-Lombok的工作原理" class="headerlink" title="3. Lombok的工作原理"></a>3. Lombok的工作原理</h3><p>Lombok通过<strong>Java注解处理器（Annotation Processor）</strong> 在编译时动态生成代码（如getter&#x2F;setter）。要使其生效，编译器必须能找到Lombok的注解处理器（包含在lombok.jar中）。</p><p>Maven中有两种方式指定注解处理器：</p><ul><li>显式配置：通过<code>maven-compiler-plugin</code>的<code>&lt;annotationProcessorPaths&gt;</code>指定</li><li>默认机制：自动从项目依赖中寻找包含注解处理器的JAR包</li></ul><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>注释掉手动配置的<code>maven-compiler-plugin</code>后，问题得到解决：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 注释掉手动配置的编译插件 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- &lt;plugin&gt;</span><br><span class="hljs-comment">      &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="hljs-comment">      &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span><br><span class="hljs-comment">      &lt;configuration&gt;</span><br><span class="hljs-comment">        &lt;annotationProcessorPaths&gt;</span><br><span class="hljs-comment">          &lt;path&gt;</span><br><span class="hljs-comment">            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="hljs-comment">            &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="hljs-comment">          &lt;/path&gt;</span><br><span class="hljs-comment">        &lt;/annotationProcessorPaths&gt;</span><br><span class="hljs-comment">      &lt;/configuration&gt;</span><br><span class="hljs-comment">    &lt;/plugin&gt; --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-comment">&lt;!-- 配置... --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><p>为什么这样就行？因为：</p><ol><li><p><strong>SpringBoot父工程已包含默认配置</strong>：<code>spring-boot-starter-parent</code>已经内置了<code>maven-compiler-plugin</code>的默认配置，包括对注解处理器的支持</p></li><li><p><strong>默认机制会自动发现Lombok</strong>：Lombok的JAR包中包含<code>META-INF/services/javax.annotation.processing.Processor</code>文件，声明了它是注解处理器，父工程的默认配置会自动扫描并使用</p></li><li><p><strong>避免了版本冲突</strong>：注释掉手动配置后，Maven会使用依赖中声明的Lombok版本，不会出现版本不匹配问题</p></li></ol><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><p>为了避免类似问题，总结几个最佳实践：</p><ol><li><strong>明确指定Lombok版本</strong>：即使依赖管理正常，显式指定版本也能提高项目稳定性</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.24<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span> <span class="hljs-comment">&lt;!-- 明确版本 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li><p><strong>正确配置IDE</strong>：确保IDEA安装了Lombok插件并启用注解处理器</p><ul><li>安装插件：<code>File -&gt; Settings -&gt; Plugins</code>搜索Lombok</li><li>启用注解处理：<code>File -&gt; Settings -&gt; Build, Execution, Deployment -&gt; Compiler -&gt; Annotation Processors</code>勾选<code>Enable annotation processing</code></li></ul></li><li><p><strong>合理使用父工程配置</strong>：对于SpringBoot项目，优先使用<code>spring-boot-starter-parent</code>提供的默认配置，除非有特殊需求，否则不要重复声明<code>maven-compiler-plugin</code></p></li><li><p><strong>需要自定义编译配置时</strong>：如果必须手动配置<code>maven-compiler-plugin</code>，确保注解处理器路径配置完整</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">annotationProcessorPaths</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">path</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.24<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span> <span class="hljs-comment">&lt;!-- 与依赖版本一致 --&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">annotationProcessorPaths</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Lombok注解失效问题看似复杂，实则大多与版本管理和编译配置有关。理解Maven的依赖管理机制、注解处理器工作原理以及SpringBoot父工程的默认配置，能帮助我们快速定位并解决这类问题。</p><p>记住：大多数时候，使用SpringBoot提供的默认配置就足够了，不要过度自定义配置，以免引入不必要的问题。</p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>SpringBoot</category>
      
      <category>问题解决</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>Lombok</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/08/09/hello-world/"/>
    <url>/2025/08/09/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
