<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>解决SpringBoot中Lombok注解失效的那些坑</title>
    <link href="/2025/08/13/%E8%A7%A3%E5%86%B3SpringBoot%E4%B8%ADLombok%E6%B3%A8%E8%A7%A3%E5%A4%B1%E6%95%88%E7%9A%84%E9%82%A3%E4%BA%9B%E5%9D%91/"/>
    <url>/2025/08/13/%E8%A7%A3%E5%86%B3SpringBoot%E4%B8%ADLombok%E6%B3%A8%E8%A7%A3%E5%A4%B1%E6%95%88%E7%9A%84%E9%82%A3%E4%BA%9B%E5%9D%91/</url>
    
    <content type="html"><![CDATA[<p>在 SpringBoot 项目开发中，Lombok 注解突然失效是一个很常见的问题，表现为明明添加了 @Data 等注解，却在编译时出现 “找不到符号”（如缺失 getter&#x2F;setter 方法）的错误。本文记录了我在项目中遇到该问题的排查过程，分析了 Lombok 注解失效与 Maven 编译插件（maven-compiler-plugin）配置、版本管理之间的关系，并总结了可行的解决方案和最佳实践。</p><span id="more"></span><h1 id="解决SpringBoot中Lombok注解失效的那些坑"><a href="#解决SpringBoot中Lombok注解失效的那些坑" class="headerlink" title="解决SpringBoot中Lombok注解失效的那些坑"></a>解决SpringBoot中Lombok注解失效的那些坑</h1><p>在开发SpringBoot项目时，相信很多同学都遇到过Lombok注解突然失效的问题：代码里明明加了<code>@Data</code>注解，编译时却报”找不到符号”（比如缺失getter&#x2F;setter方法）。最近我在项目中就遇到了类似问题，通过排查终于找到原因，在这里记录一下整个过程和解决方案。</p><h2 id="问题现象"><a href="#问题现象" class="headerlink" title="问题现象"></a>问题现象</h2><p>项目中使用了Lombok的<code>@Data</code>、<code>@Getter</code>等注解，但编译时出现一系列”找不到符号”错误：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-function">java: 找不到符号</span><br><span class="hljs-function">  符号:   变量 <span class="hljs-title">log</span></span><br><span class="hljs-function">  位置: 类 <span class="hljs-title">org.hnu.tablerecognition.common.interceptor.JwtTokenInterceptor</span></span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-title">java</span>: 找不到符号</span><br><span class="hljs-function">  符号:   方法 <span class="hljs-title">getRoleId</span>()</span><br><span class="hljs-function">  位置: 类型为<span class="hljs-title">xxx.UpdateRoleMenuDto</span>的变量 <span class="hljs-title">updateRoleMenuDto</span></span><br></code></pre></td></tr></table></figure><p>检查代码发现实体类确实添加了<code>@Data</code>注解，依赖也已引入，这就让人很困惑了。</p><h2 id="项目环境与配置"><a href="#项目环境与配置" class="headerlink" title="项目环境与配置"></a>项目环境与配置</h2><p>先看看我的项目依赖配置（pom.xml关键部分）：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.4.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- Lombok依赖 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 其他依赖... --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 显式配置的编译插件 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">annotationProcessorPaths</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">path</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 注意这里没有指定version --&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">annotationProcessorPaths</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-comment">&lt;!-- 配置... --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>经过排查，发现问题主要出在三个方面：</p><h3 id="1-Lombok版本管理问题"><a href="#1-Lombok版本管理问题" class="headerlink" title="1. Lombok版本管理问题"></a>1. Lombok版本管理问题</h3><p>SpringBoot的<code>spring-boot-starter-parent</code>会统一管理大部分官方 starters 的版本，但<strong>Lombok并非SpringBoot官方组件</strong>，所以其版本不会被parent默认管理。</p><p>当在pom.xml中不指定Lombok版本时，Maven会尝试从依赖链中查找版本，但如果没有其他依赖间接引入Lombok，会导致：</p><ul><li>依赖版本缺失</li><li>引入低版本或不兼容版本</li></ul><p>这会直接导致编译时无法解析Lombok注解，出现”找不到符号”错误。</p><h3 id="2-maven-compiler-plugin的配置冲突"><a href="#2-maven-compiler-plugin的配置冲突" class="headerlink" title="2. maven-compiler-plugin的配置冲突"></a>2. maven-compiler-plugin的配置冲突</h3><p><code>maven-compiler-plugin</code>是Maven的编译插件，负责将Java源代码编译为字节码。我的问题就出在显式配置了这个插件，但存在两个问题：</p><ul><li>在<code>&lt;annotationProcessorPaths&gt;</code>中指定了Lombok却没有显式声明版本</li><li>手动配置覆盖了SpringBoot父工程的默认配置</li></ul><h3 id="3-Lombok的工作原理"><a href="#3-Lombok的工作原理" class="headerlink" title="3. Lombok的工作原理"></a>3. Lombok的工作原理</h3><p>Lombok通过<strong>Java注解处理器（Annotation Processor）</strong> 在编译时动态生成代码（如getter&#x2F;setter）。要使其生效，编译器必须能找到Lombok的注解处理器（包含在lombok.jar中）。</p><p>Maven中有两种方式指定注解处理器：</p><ul><li>显式配置：通过<code>maven-compiler-plugin</code>的<code>&lt;annotationProcessorPaths&gt;</code>指定</li><li>默认机制：自动从项目依赖中寻找包含注解处理器的JAR包</li></ul><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>注释掉手动配置的<code>maven-compiler-plugin</code>后，问题得到解决：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 注释掉手动配置的编译插件 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- &lt;plugin&gt;</span><br><span class="hljs-comment">      &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="hljs-comment">      &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span><br><span class="hljs-comment">      &lt;configuration&gt;</span><br><span class="hljs-comment">        &lt;annotationProcessorPaths&gt;</span><br><span class="hljs-comment">          &lt;path&gt;</span><br><span class="hljs-comment">            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="hljs-comment">            &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="hljs-comment">          &lt;/path&gt;</span><br><span class="hljs-comment">        &lt;/annotationProcessorPaths&gt;</span><br><span class="hljs-comment">      &lt;/configuration&gt;</span><br><span class="hljs-comment">    &lt;/plugin&gt; --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-comment">&lt;!-- 配置... --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><p>为什么这样就行？因为：</p><ol><li><p><strong>SpringBoot父工程已包含默认配置</strong>：<code>spring-boot-starter-parent</code>已经内置了<code>maven-compiler-plugin</code>的默认配置，包括对注解处理器的支持</p></li><li><p><strong>默认机制会自动发现Lombok</strong>：Lombok的JAR包中包含<code>META-INF/services/javax.annotation.processing.Processor</code>文件，声明了它是注解处理器，父工程的默认配置会自动扫描并使用</p></li><li><p><strong>避免了版本冲突</strong>：注释掉手动配置后，Maven会使用依赖中声明的Lombok版本，不会出现版本不匹配问题</p></li></ol><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><p>为了避免类似问题，总结几个最佳实践：</p><ol><li><strong>明确指定Lombok版本</strong>：即使依赖管理正常，显式指定版本也能提高项目稳定性</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.24<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span> <span class="hljs-comment">&lt;!-- 明确版本 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li><p><strong>正确配置IDE</strong>：确保IDEA安装了Lombok插件并启用注解处理器</p><ul><li>安装插件：<code>File -&gt; Settings -&gt; Plugins</code>搜索Lombok</li><li>启用注解处理：<code>File -&gt; Settings -&gt; Build, Execution, Deployment -&gt; Compiler -&gt; Annotation Processors</code>勾选<code>Enable annotation processing</code></li></ul></li><li><p><strong>合理使用父工程配置</strong>：对于SpringBoot项目，优先使用<code>spring-boot-starter-parent</code>提供的默认配置，除非有特殊需求，否则不要重复声明<code>maven-compiler-plugin</code></p></li><li><p><strong>需要自定义编译配置时</strong>：如果必须手动配置<code>maven-compiler-plugin</code>，确保注解处理器路径配置完整</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">annotationProcessorPaths</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">path</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.24<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span> <span class="hljs-comment">&lt;!-- 与依赖版本一致 --&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">annotationProcessorPaths</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Lombok注解失效问题看似复杂，实则大多与版本管理和编译配置有关。理解Maven的依赖管理机制、注解处理器工作原理以及SpringBoot父工程的默认配置，能帮助我们快速定位并解决这类问题。</p><p>记住：大多数时候，使用SpringBoot提供的默认配置就足够了，不要过度自定义配置，以免引入不必要的问题。</p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>Lombok</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/08/09/hello-world/"/>
    <url>/2025/08/09/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
